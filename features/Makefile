# Smallworld Emacs Make file for creating byte-compiled filews for various Emacsen.
#
# gmake all     : byte compiles all the feature code for all Emacsen, copying the elc files
#                 to appropriate version numbered subdirectories
# gmake all_elc : byte compiles all the feature code for the latest Emacs.
# gmake CUTTER  : Used by CUT process.
#                 Delivered code only need support and compiled for the latest Emacs
# gmake clean   : Remove all byte compiled files under the source tree.
#
# Variables:
#  EMACSxx    : Emacs executable for version xx.
#  EMACS      : current/latest/generic Emacs executable to use.
#               Useful for compiling individual features.
#  INSTALLDIR : Location to install .elc files to. Defaults to `pwd`/xx 
#  'Feature'  : Directory based features have variable set to their subdirectory name. 
#

RM=rm -f
RMDIR=rm -fr
MKDIR=mkdir -p
FIND=find
TAR=tar
LN=ln

# Emacs executables
EMACS23=emacs-23.3
EMACS22=emacs-22.1
EMACS21=emacs-21.2
EMACS20=emacs-20.7
EMACS=$(EMACS23)

INSTALLROOTDIR=$(shell pwd)
EMACS_LOADPATH=.

# Directory based features
AUTO_COMPLETE=auto-complete-1.3.1
CEDET        =cedet-1.0
ECB          =ecb-2.40
NXML         =nxml-mode-20041004
TABBAR       =tabbar-1.3
TREE_WIDGET  =tree-widget-2.0
VC_CLEARCASE =vc-clearcase-3.6
VC_CLEARCASE2=vc-clearcase-2.2
YASNIPPET    =yasnippet-0.6.1c

FEATURES=$(AUTO_COMPLETE) $(CEDET) $(ECB) $(NXML) $(TABBAR) $(TREE_WIDGET) \
	 $(VC_CLEARCASE) $(VC_CLEARCASE2) $(YASNIPPET)

# Collections of .el and .elc files
EL_FILES1 =all.el backup-dir.el breadcrumb.el \
	   dabbrev-expand-multiple.el dedicated.el ebackup.el graphviz-dot-mode.el hideshowvis.el \
	   highline.el htmlize-view.el htmlize.el pabbrev.el pair-mode.el \
	   powershell-mode.el rnc-mode.el setnu+.el setnu.el \
	   w32browser-dlgopen.el
ELC_FILES1=${EL_FILES1:.el=.elc}

EL_FILES2 =buffer-move.el clearcase-166.el cmd-mode.el mic-paren.el
ELC_FILES2=${EL_FILES2:.el=.elc}

EL_FILES3 =visual-basic-mode.el
ELC_FILES3=${EL_FILES3:.el=.elc}

TABBAR_EL =$(shell $(FIND) $(TABBAR) -name '*.el')
TABBAR_ELC=${TABBAR_EL:.el=.elc}

TREE_WIDGET_EL =$(shell $(FIND) $(TREE_WIDGET) -name '*.el')
TREE_WIDGET_ELC=${TREE_WIDGET_EL:.el=.elc}

VC_CLEARCASE_EL =$(shell cd $(VC_CLEARCASE2) $(shell echo *.el))
VC_CLEARCASE_EL =$(shell $(FIND) $(VC_CLEARCASE) -name '*.el')
VC_CLEARCASE_ELC=${VC_CLEARCASE_EL:.el=.elc}

VC_CLEARCASE2_EL =$(shell $(FIND) $(VC_CLEARCASE2) -name '*.el')
VC_CLEARCASE2_ELC=${VC_CLEARCASE2_EL:.el=.elc}

YASNIPPET_EL =$(shell $(FIND) $(YASNIPPET) -name '*.el')
YASNIPPET_ELC=${YASNIPPET_EL:.el=.elc}

# Byte compile all features for all Emacsen
all: clean elc23 elc22 elc21 elc20

# Target for anvil CUTTER process
CUTTER: clean ede all_elc

# Target for anvil tag CAMBRIDGE process
CAMBRIDGE: ede all

# Target for anvil tag ESCROW process
ESCROW:
	@echo $(MAKEFILE_LIST) copied for ESCROW purposes

# Target for latest Emacs code. 
all_elc:
	echo "============ $(EMACS)"
	${MAKE} auto-complete cedet ecb elc tabbar tree_widget vc_clearcase yasnippet

# Targets to byte-compile features for specific Emacs versions
elc23:
	echo "============ $(EMACS23)"
	${MAKE} EMACS=$(EMACS23) INSTALLDIR=$(INSTALLROOTDIR)/23 all_elc install clean

elc22:
	echo "============ $(EMACS22)"
	${MAKE} EMACS=$(EMACS22) INSTALLDIR=$(INSTALLROOTDIR)/22 auto-complete cedet ecb elc nxml tabbar tree_widget vc_clearcase2 yasnippet install clean

elc21:
	echo "============ $(EMACS21)"
	${MAKE} EMACS=$(EMACS21) INSTALLDIR=$(INSTALLROOTDIR)/21 $(ELC_FILES1) $(ELC_FILES2) nxml install clean

elc20:
	echo "============ $(EMACS20)"
	${MAKE} EMACS=$(EMACS20) INSTALLDIR=$(INSTALLROOTDIR)/20 $(ELC_FILES1) install clean

# target ede touches the timestamps of the Makefiles.
# This is because they are normally generated by EDE, but we have not usually changed anything
ede:
	$(FIND) $(CEDET) -name 'Makefile' -exec touch {} \;

# Targets for directory based features.
auto-complete:
	cd $(AUTO_COMPLETE); ${MAKE} EMACS=$(EMACS)

cedet:
	cd $(CEDET); ${MAKE} EMACS=$(EMACS)

ecb:
	cd $(ECB); ${MAKE}  EMACS=$(EMACS)

nxml:
	cd $(NXML); ${MAKE} EMACS=$(EMACS)

tabbar: 
	${MAKE} EMACS=$(EMACS) EMACS_LOADPATH=$(TABBAR) $(TABBAR_ELC)

tree_widget: 
	${MAKE} EMACS=$(EMACS) EMACS_LOADPATH=$(TREE_WIDGET) $(TREE_WIDGET_ELC)

  # Current version of vc-clearcase feature
vc_clearcase: 
	${MAKE} EMACS=$(EMACS) EMACS_LOADPATH=$(VC_CLEARCASE) $(VC_CLEARCASE_ELC)

  # vc-clearcase feature for Emacs 22.
vc_clearcase2:
	${MAKE} EMACS=$(EMACS) EMACS_LOADPATH=$(VC_CLEARCASE2) $(VC_CLEARCASE2_ELC)

yasnippet:
	${MAKE} EMACS=$(EMACS) EMACS_LOADPATH=$(YASNIPPET) $(YASNIPPET_ELC)

# Compile all non-directory based features.
#   Split into parts since some are only copatible with later Emacsen.
elc: $(ELC_FILES1) $(ELC_FILES2) $(ELC_FILES3)

# Recreates the byte-compiled directory structure.
install:
	chmod -R u+rw $(INSTALLDIR)
	$(RMDIR) $(INSTALLDIR)
	$(MKDIR) $(INSTALLDIR)
	$(TAR) cf - `$(FIND) $(FEATURES) -name '*.elc'` *.elc | ( cd $(INSTALLDIR) ; $(TAR) xfBp - )
	echo "hardlinking source files to byte-compiled directory for C-h Emacs help lookup facility."
	cd $(INSTALLDIR); $(FIND) . -name '*.elc' | sed -e 's/c$$//g' | xargs -i ln ../"{}" "{}"
	echo "setting up subdirs.el in " $(INSTALLDIR)
	echo "(if (fboundp 'normal-top-level-add-subdirs-to-load-path)"  > $(INSTALLDIR)/subdirs.el
	echo "    (normal-top-level-add-subdirs-to-load-path))"         >> $(INSTALLDIR)/subdirs.el
	$(RM) $(INSTALLDIR)/subdirs.elc
	echo "Making all byte-compiled directory structure read-only..."
	chmod -R ugo-w $(INSTALLDIR)

# Clean source tree
clean:
	$(FIND) $(FEATURES) -name '*.elc' -exec $(RM) {} \;
	$(RM) *.elc

# Generic .el -> .elc target.
#   EMACS_LOADPATH allows for provision of an extra load-path location.
.SUFFIXES: .elc .el
.el.elc :
	$(EMACS) -L . -L $(EMACS_LOADPATH) -batch -f batch-byte-compile $<
