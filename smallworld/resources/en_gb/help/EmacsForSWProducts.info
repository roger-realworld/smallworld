This is EmacsForSWProducts.info, produced by makeinfo version 4.8 from
U:\sword\online\swcore\EmacsDoc\EmacsForSWProducts_Info\Output/EmacsForSWProducts.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* GNU Emacs for Smallworld Products: (EmacsForSWProducts).	GNU Emacs for Smallworld Products
END-INFO-DIR-ENTRY


File: EmacsForSWProducts.info,  Node: Top,  Up: (dir)

GNU Emacs for Smallworld Products
*********************************

This document introduces the use of the GNU Emacs editor for Smallworld
products. It gives a brief overview of Emacs facilities, describes the
Smallworld extensions and indicates how to get more information about Emacs.

GNU Emacs provides an advanced, customisable environment for working on text
files and running executable files. You can edit several files simultaneously,
open multiple windows and run processes, including Smallworld sessions. Emacs
is delivered with Smallworld Core Spatial Technology and includes extensions
which improve the working environment for administrators, configurers and
developers of Smallworld products.

Emacs is developed by the Free Software Foundation, who promote the
development and use of high-quality free software. GNU Emacs runs on computers
from Crays down to PCs, including OS/2®, OpenVMS, Windows®, Macintosh, MS-DOS®
and about 70 types of UNIX®.

GNU Emacs 22.1 and later versions feature multi-byte character handling for
languages using non-Latin character sets and support for drag and drop. GNU
Emacs 23.3, installed with Smallworld Core 4.3, includes a number of third
party features which are configured to make best use of their functionality in
a Smallworld environment.

For general information about Emacs and the Free Software Foundation, see:

   * The GNU Emacs home page: `http://www.gnu.org/software/emacs/emacs.html'

   * The GNU Emacs for Windows home page:
     `http://www.gnu.org/software/emacs/windows/ntemacs.html'

* Menu:

* Introduction to the GNU Emacs editor::
* Keys for Smallworld Emacs commands::
* The SW menu::
* Gis mode and running a Smallworld session::
* Magik mode and editing Magik source code::
* Using the Class Browser::
* Modes for other Smallworld files::
* Advanced features and customisation::


File: EmacsForSWProducts.info,  Node: Introduction to the GNU Emacs editor,  Next: Keys for Smallworld Emacs commands,  Prev: Top,  Up: Top

Introduction to the GNU Emacs editor
************************************

The GNU Emacs editor installed with Smallworld Core Spatial Technology has
been customised to help you manage, configure and develop Smallworld products
and applications, including creating and editing Magik source code.

* Menu:

* Getting started::
* Smallworld extensions to Emacs::
* Invoking commands::
* Accessing help information::
* Files and directories for Emacs::
* Some Emacs concepts::
* Some standard Emacs key bindings::
* Smallworld major modes for Emacs buffers::
* Emacs minor modes::


File: EmacsForSWProducts.info,  Node: Getting started,  Next: Smallworld extensions to Emacs,  Up: Introduction to the GNU Emacs editor

Getting started
===============

On Windows computers, Emacs is started from an icon in the Smallworld Program
Group, accessed from the Start menu. Create the icon by using the Program
Group Administration dialog box, started from the Configuration application.

See System Administration for details.

On UNIX computers, depending on the user configuration, an Emacs window
normally appears on your desktop when you log on. If you want to start another
Emacs session at any time you can type emacs23.3 & at a UNIX prompt.

Emacs is easy to use for simple tasks. Text inserts itself as you type and you
can move around a document using the graphics cursor, the cursor keys or the
scroll bars. When you make mistakes you can reverse (undo) any number of
previous editing operations. You can also redo an editing operation which you
have undone. You can load a file into an Emacs buffer for viewing or editing
and save an updated buffer as a new or existing file.

An Emacs installation provides many alternative major modes, each of which
customises Emacs for editing text or running a process of a particular sort.
The major modes are mutually exclusive, and each buffer has one major mode at
any time. The mode line for a window normally shows the name of the current
major mode.

Emacs is extremely powerful and has many useful editing features; if there is
a feature which you would like to use then it is probably available and
described in the Emacs documentation.


File: EmacsForSWProducts.info,  Node: Smallworld extensions to Emacs,  Next: Invoking commands,  Prev: Getting started,  Up: Introduction to the GNU Emacs editor

Smallworld extensions to Emacs
==============================

GNU Emacs as supplied with Smallworld Core Spatial Technology is customised to
interact with a Smallworld session and to understand the syntax of files in an
installed Smallworld product such as Smallworld Magik source code. The
standard GNU Emacs features still work as usual.

Many of the Smallworld extensions to Emacs are implemented by defining major
modes which provide specific facilities for a file type or for a Smallworld
session. For more details, see *Note Smallworld major modes for Emacs
buffers::.

GNU Emacs as supplied with Smallworld Core has a toolbar, including icons and
tooltips for frequently-used commands. In addition, buffer windows have a set
of tabs to allow easy access to a set of related buffers or files.

Other extensions enhance the mouse and keyboard functions. For example:

   * Clicking the left and right mouse buttons together is an alternative to
     clicking the middle mouse button; thus a two-button mouse can be used for
     Emacs as supplied with a Smallworld installation. See also *Note Mouse
     support::.

   * Standard GNU Emacs does make much general use of function keys and so the
     function keys are available for Smallworld Emacs commands. To to get a
     summary, press F2 and then F1. Function keys F11 and F12 are deliberately
     unassigned  -  they are left for individual site-specific customisation.
     See also *Note Keys for Smallworld Emacs commands::.


File: EmacsForSWProducts.info,  Node: Invoking commands,  Next: Accessing help information,  Prev: Smallworld extensions to Emacs,  Up: Introduction to the GNU Emacs editor

Invoking commands
=================

Many general Emacs commands are available from the menu bar of the Emacs
window, may be available from the toolbar and are also invoked by a key
sequence involving the Ctrl key or the Meta (or Alt) key. The following
abbreviations are used in the Emacs documentation:

   * C-<chr> Hold down the Ctrl key and press the key <chr>. Thus, C-f means
     press Ctrl+F (hold down the Ctrl key and press F).

   * M-<chr> Hold down the Meta or Alt key and press the key <chr>. If your
     keyboard does not have a Meta or Alt key, press the Esc key and then
     press the key <chr>. The abbreviation <ESC> is sometimes used for
     pressing the Esc key.

   * S-<chr> Hold down the Shift key and press the key <chr>. Sometimes you
     see a reference to M-<chr> where <chr> is a character normally accessed
     by pressing the Shift key, for example % (the Percent key). In this case
     the pressing of the Shift key is implicit. So M-% is equivalent to
     Meta+Shift+5.

The key sequence used to invoke a command is described as a key binding. For
example:

   * Ctrl+H (C-h) for help.

   * Ctrl+_ or Ctrl+/ (C-_ or C-/) to undo the last operation.

   * Ctrl+G (C-g) to abort a current operation.

See *Note Some standard Emacs key bindings:: for some more examples.

Most of the extra Smallworld Emacs commands are available from the SW menu and
other specialised menus on the Emacs menu bar. They can also be invoked by
pressing a function key, releasing it and then pressing another key.

For example, to see a list of key bindings for Smallworld commands, you can
press F2 and then press F1. In the Smallworld documentation, this is shown as
F2, F1. In the general Emacs documentation, this is shown as f2 f1. For a
summary of Smallworld Emacs commands, see *Note Keys for Smallworld Emacs
commands::.

Some commands must be typed in by name; this requires the Emacs Meta key:

   * On Windows computers, press Alt+X and then type the command name. In this
     case, Alt is the Emacs Meta key.

   * On other computers, you can press Esc, X or Ctrl+[, X for the Emacs Meta
     key and then type the command name.

In the Smallworld documentation, the Emacs Meta key is shown as Meta; for
example:

press Meta+X and then type the command name

In the general Emacs documentation, the Meta key is shown as M; for example:

press M-x and then type the command name


File: EmacsForSWProducts.info,  Node: Accessing help information,  Next: Files and directories for Emacs,  Prev: Invoking commands,  Up: Introduction to the GNU Emacs editor

Accessing help information
==========================

Emacs has its own online help, most of which is accessed from the main Help
menu on the Emacs menu bar. On the Emacs Help menu:

   * Click Read the Emacs Manual to show the topic for the Emacs editor in
     info format. This topic includes useful indexes for key bindings,
     commands, variables and concepts.

   * Click Emacs News for information about the new features at this version
     of Emacs and Emacs Tutorial for a self-teach introduction to Emacs.

   * Use the Manuals menu to search or browse all the help information in the
     Emacs info format. Click Browse Manuals with Info to show all the
     top-level topics. Select the Emacs topic to show the same information as
     using Read the Emacs Manual.

   * Use the Describe menu to get specific information about a mode, command,
     variable or key binding.

The key binding Ctrl+H gives access to information about the keys, commands
and so on for the current buffer. For example:

   * Ctrl+H, ? shows the available help options.

   * Ctrl+H, B gives information on the key bindings defined for the current
     buffer.

   * Ctrl+H, M gives information on the mode of the current buffer; the major
     mode is described first and any information about current minor modes is
     added afterwards.

   * Ctrl+H, A and Ctrl+H, F give information on the commands and functions
     defined for the buffer; a command is a function which can be called
     interactively.

   * Ctrl+H, V gives information on the variables defined for the buffer.

The command apropos, invoked by Meta+X, apropos, takes an expression as
parameter and describes all functions and variables which match the
expression. Variant commands such as apropos-command, apropos-variable and
apropos-value are also useful.

For specific information about the Smallworld extensions to Emacs, use the
Help submenu on the SW menu; you can choose whether to access the information
in the Emacs info format or in HTML Help format. You can also use the Help
control on the menu for any of the Smallworld major modes such as Magik or
Gis, or press F1, to display the relevant topic in Emacs info format.


File: EmacsForSWProducts.info,  Node: Files and directories for Emacs,  Next: Some Emacs concepts,  Prev: Accessing help information,  Up: Introduction to the GNU Emacs editor

Files and directories for Emacs
===============================

The Smallworld extensions to Emacs are loaded automatically when you start the
Emacs supplied with a Smallworld product.

   * These extensions are defined by files in the following directory of your
     Smallworld Core Spatial Technology installation:
        - On Windows: <SW_installation_dir>\emacs\site-lisp\smallworld

        - On UNIX: <SW_installation_dir>/emacs/share/site-lisp/smallworld

   * The initial configuration of an Emacs session is defined by the file
     defaults.el, delivered in the site-lisp directory.

See also *Note Emacs files and directories::.

The settings of many variables are defined, for all users, by sw_defaults.el.
An Emacs administrator may update this file if changes are required for all
users. You can view this file from the Customise submenu on the SW menu.

Personal customisations for an individual user, to provide custom key
bindings, variable definitions or to modify the Emacs modes, are defined by a
file named .emacs in the user's home directory. On Windows computers, a
personal customisation file may also be named _emacs. Example .emacs files are
supplied with the Smallworld extensions; use the Customise submenu on the SW
menu to view them.

A personal customisation file can be edited explicitly or can be updated using
the Emacs Customise menu controls. For details of example files and
customisation, see *Note Emacs customisation facilities::.

The home directory for Emacs is defined by the HOME environment variable. On
Windows computers, when starting Emacs supplied with a Smallworld product, the
HOME environment variable is defined from the HOMEDRIVE and HOMEPATH
environment variables. This is controlled by the Launcher program and the
gis_aliases file for the installation.

See Managing Your Installation: The Launcher program on Windows for details.


File: EmacsForSWProducts.info,  Node: Some Emacs concepts,  Next: Some standard Emacs key bindings,  Prev: Files and directories for Emacs,  Up: Introduction to the GNU Emacs editor

Some Emacs concepts
===================

This section introduces some Emacs concepts that are used in this document and
in general Emacs documentation. For more information on these or any other
Emacs concepts, use the Concept Index for the Emacs editor, accessed from the
Emacs Help menu.

Frame      An Emacs session uses one or more frames for its main user interface.
           Each frame is a top-level GUI container with a title, menu bar, one
           or more windows and an echo area. Within an Emacs session, use New
           Frame on the File menu to open a new frame.
Window     An Emacs frame can contain one, two or more windows. Each window
           shows all or part of the contents of a buffer and includes a mode
           line to give information about the buffer. One window is the selected
           window and the buffer in the selected window is the current buffer.
           Many commands operate on the selected window or current buffer.
Buffer     Emacs buffers are used for all text which is available for viewing or
           editing. For example, buffers are used to hold the contents of an
           open file, for interaction with a running process, to show a list of
           options, to display the contents of a directory or to show help
           information.
Mode line  A line at the bottom of a window giving information about the buffer
           shown in the window. Information includes: the status of the buffer
           (readonly, modified and so on); the name of the buffer (which may
           also be a file name); the major mode with additional information; the
           proportion of the buffer contents which is visible in the window.
Echo area  The echo area is at the bottom of the frame, below the mode line for
           the lowest window. It is used to display small amounts of text, such
           as the characters of a command, errors, warning messages and prompts.
           It also shows the minibuffer when required.
Minibuffer Emacs commands use the minibuffer to read arguments that are more
           complicated than a single number. Minibuffer arguments can be file
           names, buffer names, Emacs command names, and so on.
           When the minibuffer is in use, it appears in the echo area. A prompt
           is shown for the required input, and often a default argument is
           supplied as well. If required, you can use Ctrl+Q to cancel the
           command which is using the minibuffer.
Command    The Emacs minibuffer provides a command completion facility. This
completion means that you type the first part of an argument, followed by
           Spacebar, Tab or Enter, and Emacs completes the command, provides as
           many characters as possible, or shows a list of possible completions.
           If necessary, you can select the required completion or type some
           more characters and repeat the command completion request.
Major and  A major mode customises Emacs for editing text or running a process
minor      of a particular sort. Each buffer has one major mode at one time.
modes      Minor modes provide additional facilities within a major mode; minor
           modes are generally independent of each other and of the major modes.
           The major mode of a buffer is shown in its mode line; right-click the
           major mode name to show a menu of minor modes.
Point      The location of the cursor in a buffer or the minibuffer.
Mark       A special location in a buffer, which you can set by pressing
           Ctrl+Spacebar or by starting to drag the left mouse button.
Region     The text in a buffer between the point and the mark.
Key        If a command is bound to a key (or key sequence) then pressing the
binding    key or key sequence invokes the command. The key sequence provides a
           shortcut for the command. You can display a list of available key
           bindings for the current buffer by pressing Ctrl+H, B. To display a
           list of all key bindings for Smallworld Emacs commands, use F2, F1or
           see *Note Keys for Smallworld Emacs commands::.
Meta key   The Meta key is used for commands that are not bound to a key or key
           sequence - press the Meta key with X and then type the command name.
           On Windows computers, Alt is often the Meta key. Alternatively, use
           the Compose key or press Esc, X or F11, X or Ctrl+[, X and then type
           the command name.
Prefix key The prefix key allows an argument to be provided for a key binding.
           The Meta key is used with numeric arguments and Ctrl+U is the
           standard prefix key for non-numeric arguments.For example: F2, Z
           accesses the default Gis buffer; Meta+2, F2, Z accesses the second
           Gis buffer; Ctrl+U, F2, Z provides a minibuffer prompt for the
           required buffer name.


File: EmacsForSWProducts.info,  Node: Some standard Emacs key bindings,  Next: Smallworld major modes for Emacs buffers,  Prev: Some Emacs concepts,  Up: Introduction to the GNU Emacs editor

Some standard Emacs key bindings
================================

Here is a short list of basic Emacs commands; the standard Emacs key binding
is shown, with the command name and a brief description. Many of these
commands are also available from the menu bar of an Emacs window:

Ctrl+A       Beginning-of-line. Move the cursor to the start of the current
             line.
Ctrl+E       End-of-line. Move the cursor to the end of the current line.
Ctrl+G       Keyboard-quit. Quit the current command; useful when the command
             is waiting for input in the minibuffer.
Ctrl+H       Help. Help on key bindings, current mode, commands and variables
             for the current buffer.
Ctrl+K       Kill-line. Delete to the end of the current line.
Ctrl+S       Isearch-forward. Search for a character string; repeat the command
             to find the next occurrence.
Ctrl+W       Kill-region. Cuts the current region and adds to the kill buffer;
             Ctrl+W followed by Ctrl+Y provides a cut and paste operation.
Ctrl+Y       Yank. Adds the characters from the kill buffer at the cursor
             position.
Ctrl+/       Undo. Undoes the last operation; can be used repeatedly. Any other
Ctrl+_       operation breaks the undo chain; after that you can use undo
Ctrl+X, U    repeatedly to redo the previously undone commands.
Ctrl+SpacebarSet-mark-command. Set a mark to define the start of a region.
Ctrl+X, Ctrl+CSave-buffers-kill-emacs. Exit Emacs; if there are modified buffers
             or current processes then prompts for the required action.
Ctrl+X, Ctrl+FFind-file. Load a file into a buffer; if the file does not exist
             then it is created.
Ctrl+X, Ctrl+SSave-buffer. Save the buffer to disc; writes to the file which was
             loaded into the buffer.
Ctrl+X, B    Switch-to-buffer. Shows a different buffer in the current window;
             prompts for the required buffer name.
Ctrl+X, K    Kill-buffer. Closes the current buffer; if it is modified or has a
             running process then prompts for the required action.
Ctrl+X, S    Save-some-buffers. Finds all buffers which were opened onto a file
             and are modified; prompts for whether to save each one.
Ctrl+X, O    Other-window. Selects the other window, or cycles selection
             through all windows.
Ctrl+X, 1    Delete-other-window. Show just one window in the frame.
Ctrl+X, 2    Split-window-vertically. Replace the selected window with two
             windows, both initially showing the current buffer.
Ctrl+X, 3    Split-window-horizontally. Replace the selected window with two
             side-by-side windows, both initially showing the current buffer.
Ctrl+X, 5, 2 Make-frame-command. Create a new frame containing one window,
             initially showing the current buffer
Meta+<       Beginning-of-buffer. Move the cursor to the beginning of the file.
Meta+>       End-of-buffer. Move the cursor to the end of the file.
Meta+%       Query-replace. Replaces string1 with string2; prompts for action
             at each occurrence of string1.
Meta+W       Kill-ring-save. Copies the current region to the kill buffer;
             Meta+W followed by Ctrl+Y provides a copy and paste operation.
Meta+X,      Execute Emacs Lisp command.
command      

See also the Emacs reference card, distributed ready for printing as
refcard.ps in the emacs\etc directory and with control information in
refcard.tex.


File: EmacsForSWProducts.info,  Node: Smallworld major modes for Emacs buffers,  Next: Emacs minor modes,  Prev: Some standard Emacs key bindings,  Up: Introduction to the GNU Emacs editor

Smallworld major modes for Emacs buffers
========================================

This is a summary of the major modes defined by the Smallworld extensions to
Emacs.

Aliases mode  Used for a file named gis_aliases which provides command
              definitions for a Launcher program such as gis.exe on Windows.
              See *Note Aliases mode::.
Class         Used for Class Browser processes. See
Browser mode  *Note Using the Class Browser::.
Environment   Used for a versions file to select the environment to run a
mode          Smallworld session. See *Note Environment mode::.
Gis mode      Used for a Gis process running a Smallworld session; that is,
              using a Smallworld executable such as sw_magik_win32 (on Windows
              platforms) or sw_magik_motif (on UNIX platforms). See
              *Note Gis mode and running a Smallworld session::.
Loadlist mode Used for a load list file which gives a list of files to load. A
              load list file is included in the source directory of a module
              directory. See *Note Loadlist mode::.
Magik mode    Used for a Smallworld Magik source code file, with extension
              .magik. Includes Electric Magik and Method Name display
              facilities. See *Note Magik mode and editing Magik source code::.
Message mode  Used for message files (with extension .msg or .hmsg). These
              files are generally supplied as product or module resource files.
              See *Note Message mode::.
Product mode  Used for product and module definition files (product.def and
Module mode   module.def). See *Note Product mode:: and *Note Module mode::.

The major mode of a buffer is usually defined to suit the type of file which
is loaded into it - for example, a buffer showing a Magik file (with extension
.magik) is automatically set to Magik mode. The mode line for a window shows
the major mode of its current buffer, possibly with information about the
minor modes.

If you want to set the mode of a buffer explicitly then you can use the
corresponding command; for example magik-mode to set Magik mode. With the
cursor in a buffer, set it to Magik mode by typing Meta+X, magik-mode.


File: EmacsForSWProducts.info,  Node: Emacs minor modes,  Prev: Smallworld major modes for Emacs buffers,  Up: Introduction to the GNU Emacs editor

Emacs minor modes
=================

The following standard Emacs minor modes are useful in a Smallworld
installation:

Abbrev mode  This is a minor mode where typing an abbreviation, defined as a
             global string, results in a replacement string being inserted in
             the file. See also *Note Defining abbreviations for Abbrev mode::.
Font lock    This is a minor mode which is defined for several major modes and
mode         allows different faces (combinations of character properties such
             as size, colour, weight and so on) to be used for characters in
             the buffer. You can define the properties of each face using Emacs
             customisation facilities. See also
             *Note Font lock mode for Smallworld buffers::.
Line number  These are minor modes which display, in the mode line for a
mode and     window, the line and column numbers of the cursor position in the
Column       window's current buffer. Line number mode can be enabled from an
number mode  icon in the toolbar. Column number mode imposes an overhead and
             should be explicitly enabled when required.
Highlight    Keeps track of changes to a buffer and, optionally, displays them
changes mode in a different face. Allows the definition of a set of changes
             which are displayed in one face, while a different face is used
             for new changes. See also
             *Note Highlight changes mode for Smallworld buffers::.

These minor modes are available for all Smallworld major modes.

* Menu:

* Setting a minor mode::
* Font lock mode for Smallworld buffers::
* Defining abbreviations for Abbrev mode::
* Highlight changes mode for Smallworld buffers::


File: EmacsForSWProducts.info,  Node: Setting a minor mode,  Next: Font lock mode for Smallworld buffers,  Up: Emacs minor modes

Setting a minor mode
--------------------

For an individual buffer, you can toggle a minor mode with the corresponding
Emacs command. For example, with the cursor in a buffer, change its setting of
Font lock mode by typing Meta+X, font-lock-mode. Alternatively, in the mode
line for a window, right-click the major mode name and use the shortcut menu
of minor modes to toggle a minor mode for the buffer.

You can ensure that a mode is enabled for all buffers by including the
relevant command in your .emacs file. For example, to enable Abbrev mode for
all buffers, use:

     (setq-default abbrev-mode t)

In addition, you can set a minor mode for all buffers in a particular major
mode by adding the appropriate command to the mode hook. For example, to set
Font lock mode for all Magik mode buffers, use the Emacs customisation tool to
add font-lock-mode to the magik-mode-hook variable. See also *Note Emacs
customisation facilities::.


File: EmacsForSWProducts.info,  Node: Font lock mode for Smallworld buffers,  Next: Defining abbreviations for Abbrev mode,  Prev: Setting a minor mode,  Up: Emacs minor modes

Font lock mode for Smallworld buffers
-------------------------------------

Font lock mode is defined for all the Smallworld major modes. For example, in
a Magik mode buffer, different faces are used for comments, pragma statements,
Magik key words, method names and so on.

Emacs variables define the character faces for each major mode and the
character strings which they are used for. Use Customise on the SW menu or on
the custom menu for any Smallworld major mode to use Emacs customisation
facilities and modify the font lock characteristics if required (see *Note
Emacs customisation facilities::).

Font lock mode is enabled for all buffers in the session by checking Global
Font Lock on the Tools submenu of the Emacs SW menu. This corresponds to the
Emacs command global-font-lock-mode. You can toggle the font lock for the
current buffer with the command font-lock-mode or by using the shortcut menu
of minor modes for the buffer. You can also set Font lock mode for all buffers
using a particular major mode by adding font-lock-mode to the relevant mode
hook.


File: EmacsForSWProducts.info,  Node: Defining abbreviations for Abbrev mode,  Next: Highlight changes mode for Smallworld buffers,  Prev: Font lock mode for Smallworld buffers,  Up: Emacs minor modes

Defining abbreviations for Abbrev mode
--------------------------------------

Abbrev mode is a standard Emacs minor mode which is particularly useful for
buffers where you input text, such as Magik buffers. You can define your own
abbreviations, and the strings with which they should be replaced, in your
.emacs file. For example, to define scs as an abbreviation for
scrapbook_collection_stream, use the following:

     (define-global-abbrev "scs" "scrapbook_collection_stream")

You can ensure that Abbrev mode is enabled for all buffers by including the
following in your .emacs file:

     (setq-default abbrev-mode t)


File: EmacsForSWProducts.info,  Node: Highlight changes mode for Smallworld buffers,  Prev: Defining abbreviations for Abbrev mode,  Up: Emacs minor modes

Highlight changes mode for Smallworld buffers
---------------------------------------------

Highlight changes mode is defined for all Smallworld major modes. The Tools
submenu of the SW menu provides convenient access to Highlight changes mode
commands for the current buffer:

   * Highlight Changes Mode: Active - enables Highlight changes mode so that
     changes are tracked; changes are displayed in the first character face
     for highlighting changes.

   * Highlight Changes Mode: Passive - enables Highlight changes mode so that
     changes are tracked; changes are not displayed in a different face.

   * Highlight Changes Mode: Off - disables Highlight changes mode so that
     changes are not tracked. This also effectively merges any existing
     changes so that they cannot subsequently be located or displayed.

   * HCM Rotate Faces - defines the current changes as a set and displays them
     in the second face for highlighting changes. Older sets of changes are
     displayed in their next character face. The set of changes which was
     displayed in the last defined character face is unchanged.

   * HCM Goto Previous Change - when Highlight changes mode is enabled, moves
     the point to the beginning of the previous change in the buffer.

   * HCM Goto Next Change - when Highlight changes mode is enabled, moves the
     point to the beginning of the next change in the buffer.

Emacs variables provide customisation facilities for Highlight changes mode;
note that the variables may not be available until the mode is enabled for at
least one buffer:

   * highlight-changes-face-list - the list of faces used for current changes
     and for earlier sets of changes. This variable is normally initialised to
     nil and the list is created from highlight-changes-colours when needed.
     However, you can set this variable to any list of faces which allows more
     flexibility in the faces used.

   * highlight-changes-colours - defines a list of colours for highlighting
     changes. The standard list is:
          ("magenta" "blue" "darkgreen" "chocolate" "sienna4" "NavyBlue")

You can set Highlight changes mode for all buffers using a particular major
mode by adding highlight-changes-mode to the relevant mode hook. You can
automatically rotate faces when the buffer is saved by adding
highlight-changes-rotate-faces to local-write-file-hooks, like this:

     (add-hook 'local-write-file-hooks 'highlight-changes-rotate-faces)

For more information on Highlight changes mode, use Emacs help information for
the function highlight-changes-mode.


File: EmacsForSWProducts.info,  Node: Keys for Smallworld Emacs commands,  Next: The SW menu,  Prev: Introduction to the GNU Emacs editor,  Up: Top

Keys for Smallworld Emacs commands
**********************************

Most of the extra Smallworld Emacs commands are available from the SW menu and
other specialised menus on the Emacs menu bar. They can also be invoked by
using a function key sequence. For example, to see this list of commands, you
can press F2 and then press F1.

Note that function keys F11 and F12 are deliberately unassigned  -  they are
left for individual site-specific customisation.

* Menu:

* Help on Smallworld extensions to Emacs::
* General commands::
* Interacting with a Smallworld session::
* Key bindings for Magik mode::
* Interacting with a Class Browser process::
* Key bindings for other modes::


File: EmacsForSWProducts.info,  Node: Help on Smallworld extensions to Emacs,  Next: General commands,  Up: Keys for Smallworld Emacs commands

Help on Smallworld extensions to Emacs
======================================

See also the Help submenu on the SW menu and Help on the custom Smallworld
menus.

F1      Show the Smallworld Help topic for the current buffer, or the top-level
        Smallworld Help topic, in Emacs info format.
F2, F1  Show this list of key bindings for Smallworld commands.


File: EmacsForSWProducts.info,  Node: General commands,  Next: Interacting with a Smallworld session,  Prev: Help on Smallworld extensions to Emacs,  Up: Keys for Smallworld Emacs commands

General commands
================

The following commands are available from any Emacs buffer. See *Note The SW
menu:: for details, and also *Note Using the Class Browser::.

F2, S         Select a Smallworld Core product; defines the current environment
              for starting a new Smallworld session.
F2, Z         Run a Smallworld session, or goto the first Smallworld session.
Ctrl+U, F2, Z Buffer name is *gis* by default.
Meta+n, F2, Z Use Ctrl+U, F2, Z to prompt for a buffer name and start a new
              session.
              Use Meta+n, F2, Z to goto the nth Smallworld session (buffer name
              *gis*<n> by default).
F3, F3        Run or goto the Class Browser for the Smallworld session in the
Ctrl+U, F3, F3current buffer or in a visible buffer, or for the first
Meta+n, F3, F3Smallworld session.
              Use Ctrl+U, F3, F3 to start a Class Browser using a method finder
              file directly.
              Use Meta+n, F3, F3 to goto the Class Browser for the nth
              Smallworld session.
F3, M         Run or goto the Class Browser as for F3, F3 and update the search
F3, C         strings. F3, M uses the word at the cursor as the method name.
F3, /         F3, C uses the word at the cursor as the class name. F3, / clears
              the method and class name strings.
              These commands can be preceded by Ctrl+U or Meta+n in the same
              way as F3, F3.
F3, J         Goto the Class Browser as for F3, F3 and jump to the source code
              for the method at the cursor position.
              This command can be preceded by Ctrl+U or Meta+n in the same way
              as F3, F3.
F2, Tab       Attempts to complete the current word, first by completing as a
              file name then as a defined abbreviation or as a line or word in
              the current buffer. Repeating F2, Tab steps through all the
              available completions. See also
              *Note Name completion using F2 Tab::.
F5, gF5,      Go to lineSet bookmarkEdit bookmarksDelete bookmarkWrite
sF5, eF5,     bookmarkLoad bookmark
dF5, w F5, |  
F5,           Breadcrumb setBreadcrumb local previousBreadcrumb local
SpacebarF5,   nextBreadcrumb previousBreadcrumb nextBreadcrumb goto
Up ArrowF5,   currentBreadcrumb list
Down          
ArrowF5,      
Left          
ArrowF5,      
Right         
ArrowF5,      
DeleteF5,     
Enter         


File: EmacsForSWProducts.info,  Node: Interacting with a Smallworld session,  Next: Key bindings for Magik mode,  Prev: General commands,  Up: Keys for Smallworld Emacs commands

Interacting with a Smallworld session
=====================================

See also the Gis menu and *Note Gis mode and running a Smallworld session::.
Note that F2, S and F2, Z (to select a Smallworld environment and to run or
goto a Smallworld session) are described in *Note General commands::.

Some of these commands provide an interface to tools in the Development Tools
application. These commands are only relevant if this application is available
in the Smallworld session; if necessary, the application is loaded and started
in the session.

Meta+X, P     Recall previous command
Meta+X, N     Recall next command
F2, P         Recall previous command matching the string at the cursor position
F2, N         Recall next command matching the string at the cursor position
F2, Up Arrow  Fold buffer to display history of commands only
F2, Down ArrowUnfold buffer to display full contents
F2, Spacebar  Find the Electric Magik template for the word at the cursor
              position and insert it. For details, see
              *Note Electric Magik and name completion facilities::.
F4, F4        Symbol completion. Uses the symbol table for the Smallworld
              session running in the current buffer to find the symbol that
              starts with the current word, or shows all the available symbols
              starting with this word. Response may be slow.
F8            Send the command containing the cursor position to the session;
              no terminating $ is sent.
F2, F         Toggle the Gis process filter. This is enabled by default but can
              be disabled to view the actual characters output by the session.
              Many Smallworld extensions to Emacs require the Gis process
              filter to be enabled.
F4, O or      Inspect a Magik object. Prompts for an expression which is
F2, Shift+X   evaluated to return the object to inspect; the word at the cursor
F2, X         position is available as a default.
              F4, O and F2, Shift+X display the object in an Object Inspector
              from the Development Tools application.
              F2, X displays the object in an Emacs Deep Print buffer.
F4, Up Arrow  Moves the cursor to the previous or next traceback in the buffer.
F4, Down Arrow
F4, Shift+T   Finds the most recent traceback in the buffer.
F4, Shift+P   F4, Shift+D opens a Traceback Viewer for the traceback; requires
or            that the Development Tools application was running in the
F2, =         Smallworld session when the traceback occurred.
F4, Shift+S   F4, Shift+P and F2, = prompt for whether to print the traceback.
              F4, Shift+S saves the traceback in the file ~/traceback.txt.
F4, Shift+D   Finds the method at the current cursor position and loads it into
              a Magik Debugger from the Development Tools application.
F2, $         Start or goto a command shell process with the same environment
              as the Smallworld session.


File: EmacsForSWProducts.info,  Node: Key bindings for Magik mode,  Next: Interacting with a Class Browser process,  Prev: Interacting with a Smallworld session,  Up: Keys for Smallworld Emacs commands

Key bindings for Magik mode
===========================

For more information about commands and key bindings available in Magik mode,
see *Note Magik mode and editing Magik source code::.

Several of these commands interact with a Smallworld session. If there is a
current Gis buffer, or only one Gis buffer, then the corresponding Smallworld
session is used; otherwise, you are prompted for the required Gis buffer.

Commands which provide an interface to the Development Tools application are
only applicable when this application is available in the relevant Smallworld
session. The application is loaded and started if necessary; any errors are
reported to the relevant Gis buffer.

F2, B           Transmit the buffer to a Smallworld session.
F2, R or        Transmit the current region to a Smallworld session.
F2, F8 or F8    
F2, M or        Transmit the method which contains the cursor position to a
F2, F7 or F7    Smallworld session.
F2, Enter       Transmit the top-level Magik language construction surrounding
                the point in the current buffer, such as a method or procedure
                definition, to a Smallworld session.
F2, $           Transmit the chunk of Magik code, delimited by $ lines, and
                containing the cursor position, to a Smallworld session.
F4, F4          For a running Smallworld session, finds the symbol that starts
                with the current word, or lists all the available completions.
F4, O or        Inspect a Magik object. Prompts for an expression which is
F2, Shift+X     evaluated within a Smallworld session to return the object to
F2, X           inspect; the word at the cursor position is available as a
                default.
                F4, O and F2, Shift+X display the object in an Object Inspector
                from the Development Tools application.
                F2, X displays the object in an Emacs Deep Print buffer.
F4, D           Send a method to a Magik Debugger from the Development Tools
                application in a Smallworld session.
F2, Spacebar    Insert the Magik template for the preceding text (see
                *Note Electric Magik and name completion facilities::).
F2, #           Add a leading # to each line in the region to convert them to
                comments.
F2, Esc, #      Remove a leading # from each line in the region.
F2, Q           Fill comment line. Formats the current line into separate
                comment lines, adding leading indentation and # or ## to match
                the initial line.
F2, H           Format the current line as a comment heading.
F2, T           Add a trace statement. When executed, the text of the current
                line is output.
F4, S           Add a Debug statement; a toggle is available so that Debug
                statements can be transmitted as comments or as executable
                commands.
F4, R           Copy the current region to a work buffer.
F4, M           Copy the current method to a work buffer.
F4, N           Open a work buffer and give it a name.
Ctrl+M+H or F9  Mark the current method.
F4, C or F6     Copy the current method.
F4, W           Compare methods using standard Emacs facilities.
F4, E           F4, W interfaces to the Emacs command compare-windows.
                F4, E interfaces to the Emacs command ediff.


File: EmacsForSWProducts.info,  Node: Interacting with a Class Browser process,  Next: Key bindings for other modes,  Prev: Key bindings for Magik mode,  Up: Keys for Smallworld Emacs commands

Interacting with a Class Browser process
========================================

See also the Class Browser menu and *Note Using the Class Browser::. Note that
F3, F3 and its variants (F3, M to paste a method, F3, C to paste a class name
and F3, / to clear both names and F3, J to jump to source code) are available
from any buffer and are described in *Note General commands::.

F3, F         Prompts for the name of a class (including the initial package
middle-click  name, such as sw:area) and displays its class hierarchy in a
a class name  secondary Class Browser buffer; the name at the current position
              of the cursor is available as a default.
              Middle-clicking a class name is equivalent to F3, F. This is
              very useful for going up and down a class hierarchy which is
              already displayed.
F3, J         Jump to the source code of the method name indicated by the
middle-click  cursor; a Magik buffer is opened onto the relevant file if it is
a method name available in the installation.
              Middle-clicking a method name in a Class Browser buffer is
              equivalent to F3, J (available in any buffer).
Tab           Moves the mode-line cursor between the method name pattern and
Left Arrow    the class name pattern.
Right Arrow   
/             In the mode line, / clears the pattern at the current position
F3, /         of the cursor. The sequence /, Tab, /clears both patterns and is
              equivalent to the generally available key binding F3, /.
F3, Up Arrow  Unfold or fold the method display to use layouts with successive
F3, Down Arrowamounts of detail.
F3, H or      Hide the current Class Browser buffer; on hiding a secondary
Spacebar      buffer, the main buffer is shown in the selected window.
F3, S         Set Class Browser options. Displays the control panel providing
;             access to all the Class Browser options.
F3, T         Turn all topics on or off. Selects all topics which are not
              currently selected; if all topics are selected then deselects
              all topics.
F3, R         Reset Class Browser options to their initial state.
F3, Shift+F   Toggle override for pragma flags. When this override is enabled,
or F3, O      methods with any classification level or with no classification
              level are shown.
F3, Shift+T   Toggle override for topic selection. When this override is
              enabled, methods with any topic classification or with no topic
              classification are shown.
F3, 2         Toggle override for 200 limit. When this override is enabled,
              all methods matching the selection criteria are displayed, even
              if there are more than 200.
F3, G         Goto Gis buffer. For a Class Browser process with a
              corresponding Smallworld session, shows the Gis buffer for the
              Smallworld session.
F3, $         Goto Gis shell process. For a Class Browser process with a
              corresponding Smallworld session which has a shell process,
              shows the command shell buffer.


File: EmacsForSWProducts.info,  Node: Key bindings for other modes,  Prev: Interacting with a Class Browser process,  Up: Keys for Smallworld Emacs commands

Key bindings for other modes
============================

Some key bindings are available for the other Smallworld major modes.

Aliases mode
     See also *Note Aliases mode::.

     Ctrl+C   Run command definition. In the Aliases buffer, finds the command
              definition which contains the cursor position and uses the
              launcher program to run it; otherwise prompts for the required
              definition.

Environment mode
     A buffer in Environment mode is readonly so alphanumeric keys are used as
     shortcuts for commands. See also *Note Environment mode::

     Enter      Select the Smallworld Core product indicated by the cursor
     middle-clickposition; this product installation defines the environment for
                any new Smallworld sessions.
     Spacebar   Move the cursor to the next product installation in the buffer.
     R          Run the Gis command in the environment defined by the cursor
                position. Does not change the environment for any other
                sessions.
     +          Add a new product installation; prompts for the Smallworld Core
                product location, and a name and version for the installation.
                Only available if a version file is in use.
     Q          Quit; closes the buffer without making any change to the
                environment.

Loadlist mode
     See also *Note Loadlist mode::.

     F2, B      Transmit buffer. Uses the load list to load Magik files into a
                current Smallworld session; prompts for the required Gis process
                if there is more than one.
     F2, C      Toggle to control whether compiled Magikc files are saved.
     Ctrl+C, R  Refresh buffer. Uses the current contents of the directory
                containing the load list file to update the contents of the
                buffer. You can change the order of entries and save a new load
                list file if required.

Message mode
     See also *Note Message mode::.

     F2, B        Transmit buffer. Compiles the buffer contents and loads into
                  a current Smallworld session; prompts for the required Gis
                  process if there is more than one.
     F2, C        Compile message file. Compiles the buffer contents ready for
                  loading, but does not load it.
     F2, Up Arrow Move the cursor to the previous or next message.
     F2, Down Arrow
     F2, M        Mark message.

Module mode
     See also *Note Module mode::.

     F2, B       Transmit buffer. Uses the buffer contents to load all module
                 source files and all compiled message files into a current
                 Smallworld session; prompts for the required Gis process if
                 there is more than one.
     F2, D       Reload module definition. Loads the buffer contents into a
                 current Smallworld session; does not load module source files
                 or resources.
     F2, C       Compile message files. Compiles all message files for the
                 module ready for loading.
     F2, Shift+R Remove module definition from a current Smallworld session.
                 This is sometimes required to ensure the correct functionality
                 is included in the session.
     F2, S       Toggle the option to save compiled Magikc files when loading
                 module source files.
     F2, R       Toggle the option to force reloading of a module which is
                 already loaded.

Product mode
     See also *Note Product mode::.

     F2, B  Transmit buffer. Uses the buffer contents to add the product to a
            current Smallworld session; prompts for the required Gis process if
            there is more than one.
     F2, R  Reinitialise product. Uses the buffer contents to redefine the
            product in a current Smallworld session where the product is
            already defined.


File: EmacsForSWProducts.info,  Node: The SW menu,  Next: Gis mode and running a Smallworld session,  Prev: Keys for Smallworld Emacs commands,  Up: Top

The SW menu
***********

The Smallworld extensions to Emacs provide the SW menu on the Emacs menu bar.
This menu is always available; it does not depend on the mode of the current
buffer.

The SW menu contains the following entries:

   * Alias Files with a submenu of available gis_aliases files (see *Note
     Alias Files menu::)

   * Select Smallworld Environment (see *Note The Smallworld environment::)

   * Run/Goto Smallworld Session (see *Note Run or goto a Smallworld session::)

   * Start New Smallworld Session (see *Note Run or goto a Smallworld
     session::)

   * Gis Processes with a submenu of buffers running Smallworld sessions (see
     *Note Run or goto a Smallworld session::)

   * Class Browser with a submenu of Class Browser commands (see *Note Run or
     goto a Class Browser session::)

   * Class Browser Processes with a submenu of buffers running Class Browser
     sessions (see *Note Run or goto a Class Browser session::)

   * Shell Processes with a submenu of buffers running shell processes that
     are associated with a Smallworld environment.

   * List Processes opens a buffer to show all Gis, Class Browser and Shell
     processes available from controls on the SW menu.

   * Tools with a submenu of commands giving access to standard Emacs
     facilities (see *Note The Tools submenu::).

   * Customise giving access to Emacs customisation facilities and options to
     view standard Smallworld customisation files. See *Note Advanced features
     and customisation::.

   * Help with a submenu offering various ways of accessing Help information
     (see *Note The Help submenu::).

* Menu:

* Name completion using F2 Tab::
* The Smallworld environment::
* Alias Files menu::
* Run or goto a Smallworld session::
* Run or goto a Class Browser session::
* The Tools submenu::
* The Help submenu::


File: EmacsForSWProducts.info,  Node: Name completion using F2 Tab,  Next: The Smallworld environment,  Up: The SW menu

Name completion using F2 Tab
============================

The Smallworld extensions to Emacs provide F2, Tab as a convenient key binding
for name completion using the standard Emacs function hippie-expand. This
function attempts to complete the current word using a list of expansion
methods. The standard definition of this list includes the following word
completions:

   * As a file name; this can be used for absolute file names and for path
     names relative to the current directory (starting ../ or ./) or to the
     home directory (starting ~/).

   * Using the abbreviations defined for Abbrev mode (see *Note Emacs minor
     modes:: for details).

   * As a line in the current buffer, then as part of a line in the current
     buffer.

In all cases, repeating F2, Tab steps through the available completions using
all the expansion methods.

In the minibuffer, Tab, Spacebar and Enter provide name completion with a list
of available alternatives provided by the command. F2, Tab is also available
as a key binding here.

For more information, use Emacs help for the function hippie-expand.


File: EmacsForSWProducts.info,  Node: The Smallworld environment,  Next: Alias Files menu,  Prev: Name completion using F2 Tab,  Up: The SW menu

The Smallworld environment
==========================

When a Smallworld session is started within Emacs, standard environment
variables define important parameters such as the location of the Smallworld
Core product and the list of preferred languages for user messages. These
variables define the environment for the Smallworld session.

Several Smallworld sessions can be started by one Emacs session, and one user
may have access to two or more Smallworld installations, possibly providing
different versions of a product. For example, a user may have access to the
current, most recently released version, a previous version and to a
development or test version. These various Smallworld installations require
different environments when a session is run.

Running Emacs within a Smallworld Core installation
     When an Emacs session is started within a Smallworld Core installation,
     the initial environment is defined by the Smallworld installation and is
     immediately available for starting a Smallworld session.

     Starting Emacs from a Windows Start menu icon created by the
     Configuration application automatically sets up the initial environment
     defined by the Smallworld installation which provides the Configuration
     application.

     See also Installing Smallworld Core Spatial Technology: Windows:
     configuration.

Running Emacs outside any Smallworld Core installation
     In a development environment, Emacs can be installed separately from any
     Smallworld Core installation. In this case, there is no initial
     Smallworld environment; an environment must be selected before any
     Smallworld session can be started.

     The Windows installation of Smallworld includes batch files emacs.cmd and
     runemacs.cmd for starting Emacs. These files can by run from a Smallworld
     command prompt and thus pick up the Smallworld environment.

On the SW menu, use Select Smallworld Environment (key binding F2, S) to
display a buffer showing the available Smallworld environments. The buffer is
in Environment mode and provides facilities to select an environment. The
selected environment is used for all new Smallworld sessions until a different
environment is chosen.

Selecting an environment also updates the Alias Files menu to give easy access
to the relevant for starting a new Smallworld session in the selected
environment.

Available environments are defined either by a version file (name and location
defined by the variable gis-version-file) or by a version program (defined by
the variable gis-version-program). For details of the Environment mode, the
Environment menu, and the format of a version file, see *Note Environment
mode::.


File: EmacsForSWProducts.info,  Node: Alias Files menu,  Next: Run or goto a Smallworld session,  Prev: The Smallworld environment,  Up: The SW menu

Alias Files menu
================

The submenu shows a list of available gis_aliases files. The list is shown in
three parts:

   * Aliases files common to a group of users, defined by the Emacs variable
     aliases-common-file-list, and aliases files for the current user, defined
     by the Emacs variable aliases-user-file-list. With the standard variable
     values, this is just the gis_aliases file in the user's Home directory.

   * Alias files for the current Smallworld environment; that is, the
     gis_aliases file for the relevant Smallworld Core product (in
     <product>\config) and any gis_aliases files for layered products which
     are based on this Core product. Note that this list of alias files is
     updated when the Smallworld environment is changed (see *Note The
     Smallworld environment::).

   * Any alias files (with name gis_aliases) which are explicitly opened in an
     Emacs buffer. Entries in this part may duplicate entries in the other two
     parts.

Select a file on the submenu to load it into a buffer in Aliases mode. In this
buffer, you can select a command definition and use it to start a process; you
can also update the contents of the buffer and save to a file. For details,
see *Note Aliases mode::.


File: EmacsForSWProducts.info,  Node: Run or goto a Smallworld session,  Next: Run or goto a Class Browser session,  Prev: Alias Files menu,  Up: The SW menu

Run or goto a Smallworld session
================================

Within Emacs, you can run one or more Smallworld sessions as Gis processes. A
Smallworld session is based on an executable provided with an installation of
Smallworld Core Spatial Technology, such as sw_magik_win32 (on Windows
platforms) or sw_magik_motif (on UNIX platforms). A Gis process, and thus a
Smallworld session, is run in a Gis mode buffer; the Gis major mode provides
special facilities for interacting with a Smallworld session.

Run/Goto Smallworld Session; key binding F2, Z
     The basic command run by the menu entry Run/Goto Smallworld Session (key
     binding F2, Z) starts a new Smallworld session or, if the buffer for the
     first Smallworld session is available, loads it into a window and makes
     it current.

        - The default buffer name for a Smallworld session is defined by the
          Emacs variable gis-buffer-default-name; this has the standard value
          *gis*.

        - The name of the buffer for the first Smallworld session started in
          an Emacs session is stored in the variable gis-buffer; this is the
          buffer which is loaded by subsequent uses of F2, Z.

        - If this buffer is not available, F2, Z starts a new Smallworld
          session.

        - If it is necessary to start a new Smallworld session then the list
          of available Gis commands is loaded into the minibuffer.  The
          available Gis commands are defined by the following variables:

        - gis-command intended for a user's personal customisation; can be
          defined in the .emacs file or by using Meta-X set-variable.

        - gis-command-default intended for an administrator to provide a
          general default for all users.

        - gis-command-history to provide one or more additional commands as
          required by an individual user; defined in the .emacs file and can
          be set using Emacs customisation facilities.

        - In the minibuffer, use Meta+P (or Up Arrow) and Meta+N (or
          Down Arrow) to step through the Gis commands. You are warned if you
          attempt to step before the first entry, or after the last entry;
          after a few seconds, the first or last entry (as appropriate) is
          returned to the minibuffer.

        - When you have loaded the required command into the minibuffer, you
          can update it if necessary and press Enter to execute it and start
          the session.  The list of available Gis commands, and the command
          which is actually used to start the session, make up the Gis command
          history for the Gis buffer. See also *Note The Gis command history
          of a Gis buffer::.

Start New Smallworld Session; key binding Ctrl+U, F2, Z
     Several Smallworld sessions can be started in one Emacs session; the SW
     menu entries and key bindings with the use of prefix keys provide
     convenient facilities.

     The menu entry Start New Smallworld Session (key binding Ctrl+U, F2, Z)
     prompts the user for a buffer name. A default buffer name is offered,
     based on the Emacs variable gis-buffer-default-name and including the
     Smallworld environment name if this has been explicitly selected. If
     necessary <n> is added where n is the first number which gives a unique
     name. For example, a default buffer name such as *gis*<2> may be offered.

        - If the user gives a new buffer name then the list of available Gis
          commands is loaded into the minibuffer for the user to select one,
          update it if required and start a new session.

        - For a current buffer which is not in Gis mode, the available Gis
          commands are defined by the variables gis-command,
          gis-command-default and gis-command-history.

        - For a current buffer which is in Gis mode, whether or not the
          Smallworld session is still running, the available Gis commands are
          defined by the Gis command history for the buffer.  The list of
          available Gis commands, and the command which is actually used to
          start the session, make up the Gis command history for the Gis
          buffer. See also *Note The Gis command history of a Gis buffer::.

        - If the user gives a buffer name which already exists then that
          buffer is loaded into a window and made current.

Gis Processes menu entries; key bindings Meta+1, F2, Z, Meta+2, F2, Z and so on
     The Gis Processes menu offers a submenu of all the existing buffers for
     Gis processes; selecting a menu entry loads the buffer into a window and
     makes it current.

     The key bindings Meta+n, F2, Z provide key combinations for going to the
     nth Gis process. For example, Meta+2, F2, Z goes to the second process.
     You are warned if you use a key combination which does not correspond to
     an existing Gis process.

Numbering of Smallworld sessions
     Initially, Smallworld sessions are numbered sequentially so that the
     first session is first on the Gis Processes submenu and accessed by
     Meta+1, F2, Z, the second session is second on the Gis Processes submenu
     and accessed by Meta+2, F2, Z, and so on.

     The key binding F2, Z accesses the buffer whose name is held in
     gis-buffer. This is the first Smallworld session which was started and
     thus Meta+1, F2, Z is equivalent to F2, Z while this session is running.
     Note that the key binding Meta+1, F2, Z does nothing if the first
     Smallworld session is not running, while F2, Z starts the first
     Smallworld session in this case.

     See Run/Goto Smallworld Session; key binding F2, Z below.

     When a process is terminated and its buffer closed, the other processes
     are unchanged. Thus there may be a first and third process but no second
     process. If a new Smallworld session is started, any vacant numbers are
     reused before adding a new number. Thus, a new session may be defined as
     the second process if this number is available.


File: EmacsForSWProducts.info,  Node: Run or goto a Class Browser session,  Next: The Tools submenu,  Prev: Run or goto a Smallworld session,  Up: The SW menu

Run or goto a Class Browser session
===================================

The Class Browser menu provides a submenu of Class Browser commands which are
available in any buffer. See *Note Using the Class Browser:: for commands
which are specific to a Class Browser buffer.

Run/Goto Class Browser (key binding F3, F3)
     The basic command run by the menu entry Run/Goto Class Browser (key
     binding F3, F3) is to start a Class Browser for the Smallworld session in
     the current buffer or, if a Class Browser for this session is running
     already, to load its buffer into another window and make it current.

        - If the current buffer is in Gis mode and is running a Smallworld
          session, this command loads an existing Class Browser for the
          session or starts a new Class Browser using the method finder file
          which corresponds to the image file of the Smallworld session. The
          buffer name is constructed by adding *cb* to the beginning of the
          name of the Gis mode buffer (for example, *cb**gis*).

        - If the current buffer is already in Class Browser mode then the
          command has no effect.

        - If the current buffer is not in Gis mode but there is a visible Gis
          buffer then the Class Browser for this Smallworld session is started
          if necessary, loaded into another window and made current. If there
          are two or more visible Gis buffers then the user is prompted to
          select the required one.

        - Otherwise, the Class Browser for the first Smallworld session (with
          buffer name in gis-buffer) is shown or started, or the user is
          prompted for a method finder file to start a new Class Browser.  See
          Start a Class Browser process with a method finder file below.

     You can use a numeric prefix key with the basic key binding F3, F3 to run
     or goto a Class Browser for a specific Smallworld session.

     For details, see Class Browser Processes menu entries below.

     In a window showing a Class Browser buffer, the mode line shows the
     buffer name of the corresponding Smallworld session, or the name of the
     method finder file. For a Class Browser linked to a Smallworld session,
     click or middle-click the buffer name to load the Gis buffer into another
     window.

Start a Class Browser process with a method finder file
     A Class Browser process can be started directly with a method finder
     file, not connected to any Smallworld session.

     Use the menu control Start New Class Browser (key binding Ctrl+U, F3, F3).

        - You are prompted for the method finder file; this is normally a file
          with extension .mf.

        - The buffer name is constructed by adding *cb* to the beginning of
          the file name and adding <n> if necessary. For example, a second
          Class Browser process opened for a gis.mf file would use the buffer
          *cb**gis.mf*<2>.

        - A new Class Browser process is opened onto the method finder file.

Class Browser Processes menu entries
     Key bindings Meta+1, F3, F3 and so on

     The Class Browser Processes menu offers a submenu of all the existing
     Class Browser processes; selecting a menu entry loads the buffer into a
     window and makes it current. The Class Browser process for a Smallworld
     session has the same number as the corresponding Smallworld session;
     Class Browser processes which are started directly for a method finder
     file are numbered as -1, -2 and so on.

     The key bindings Meta+n, F3, F3 provide key combinations for going to the
     Class Browser for the nth Gis process; typically, this is in the buffer
     named *cb**gis*<n> (where *gis* is the first process).

     Key bindings Meta+-, Meta+n, F3, F3 go to Class Browser processes with
     negative numbers. Thus, Meta+-, Meta+1, F3, F3 goes to the main buffer
     for the first Class Browser process started directly for a method finder
     file.

Class Browser commands
     The following Class Browser commands are available when any buffer is
     current:

        - Paste Method in CB (key binding F3, M)

        - Paste Class in CB (key binding F3, C)

        - Clear Method and Class in CB (key binding F3, /)

        - Jump to Source (key binding F3, J)

     These commands all run or goto a Class Browser process as defined for the
     basic Run/Goto Class Browser command (with key binding F3 F3). In
     addition:

        - Paste Method in CB attempts to use the current word in the current
          buffer as a method name and pastes this into the mode line of the
          Class Browser buffer.

        - Paste Class in CB attempts to use the current word in the current
          buffer as a class name and pastes this into the mode line of the
          Class Browser buffer.

        - Clear Method and Class in CB clears the class name and method name
          strings in the mode line of the Class Browser buffer.

        - Jump to Source attempts to use the current word in the current
          buffer as a method name, pastes this into the mode line of the Class
          Browser buffer and clears the class name. If there is only one
          matching method in the Class Browser display, the source file is
          shown in a new Magik mode buffer.

     Note that the options and other mode line elements of the relevant Class
     Browser are not altered, so you may need to make more changes in the
     Class Browser buffer to see the required results. For more information,
     see *Note Using the Class Browser::.


File: EmacsForSWProducts.info,  Node: The Tools submenu,  Next: The Help submenu,  Prev: Run or goto a Class Browser session,  Up: The SW menu

The Tools submenu
=================

The Tools submenu of the SW menu provides convenient access to standard Emacs
tools which are not easily available elsewhere, and to Smallworld custom tools.

The contents of this menu can be customised for an individual user; it is
defined by the variable menu-sw-tools-submenu (see *Note Advanced features and
customisation:: for more details).

The standard Tools menu contains the following controls:

   * Emacs Code Browser Provides a window layout with dynamic updates in
     various dedicated windows, such as tree view, function help, buffer index
     and so on. The ECB (Emacs Code Browser) uses auto-complete mode; see
     *Note Magik mode and editing Magik source code::.

     When the ECB is first started, loading and configuration is required.
     Once configured, the ECB can be enabled or disabled from the Tools menu
     or from a toolbar icon. When enabled, useful toolbar icons are available.

   * Breadcrumbs list (key binding F5) Shows a list of breadcrumb bookmarks
     which can be saved to a file and used across Emacs sessions. Toolbar
     icons are available for setting a bookmark and for getting or editing a
     bookmark.

   * Command Shell (key binding Ctrl+Z) Opens a command shell in a new buffer.

   * Imenu (key binding Shift+middle-click) Creates an Imenu (shortcut menu)
     for the current buffer, depending on its mode. For example, in a Magik
     mode buffer, the shortcut menu lists all methods, globals, procedures and
     so on that are defined in the Magik source code; see *Note Imenu and
     Speedbar for a Magik buffer::.

   * Occur Quick access to the standard Emacs occur command. Prompts for the
     string to find in the current buffer and opens a new buffer with a list
     of all occurrences. See the Emacs Help information for more details.

   * All Quick access to the standard Emacs all command. Prompts for the
     string to find in the current buffers and allows direct access to all
     occurrences. See the Emacs Help information for more details.

   * Speedbar Creates a Speedbar - a separate frame next to the main Emacs
     frame. For a buffer opened onto a file, the Speedbar shows the directory
     structure for the file. The Speedbar usually integrates itself with the
     Imenu contents for the current buffer to show the same controls.

   * Dynamic TODO Mode Check to enable Dynamic TODO mode. This is a Smallworld
     customisation of the Emacs occur command. It opens a *TODO* buffer in a
     new frame showing all lines in the current buffer containing the string
     defined by the Emacs variable todo-dynamic-regexp. The standard value of
     this variable shows lines containing TODO or FIXME. When a new buffer is
     made current, the *TODO* buffer is updated. You can use the entries in
     the *TODO* buffer as an index into the source buffer.

     This mode is useful for identifying lines in a file, such as a Magik
     source code file, which require attention.

   * Global YASnippet mode Check to enable YASnippet mode for all buffers.
     YASnippets are defined for Magik code.

   * Global Font Lock Check to enable Font lock mode for all buffers. See also
     *Note Font lock mode for Smallworld buffers::.

   * Global Highlight Current Line mode Check to highlight the current line in
     all buffers.

   * Skeleton Pair mode Check to enable Skeleton Pair mode for inserting
     characters, generally used for inserting matching brackets and quote
     marks. See the Emacs Help information for more details.

   * Auto-Complete mode Check to enable Auto-Complete mode, providing
     context-specific completions particularly for Magik code. See *Note
     Electric Magik and name completion facilities:: for details.

   * More Structured Buffers When this is checked, the Buffers menu is
     organised with submenus of related buffers such as processes and Magik
     files.

   * Minibuffer Incremental Complete mode Check to enable incremental
     completions for the Minibuffer.

   * Show Trailing Whitespace Uses a custom face for trailing whitespace, such
     as spaces or tabs after any printing characters in a line. The standard
     Emacs face trailing-whitespace is used for all Smallworld modes.

   * Controls for Highlight changes mode Convenient access to commands for
     Highlight changes mode; for details, see *Note Highlight changes mode for
     Smallworld buffers::.


File: EmacsForSWProducts.info,  Node: The Help submenu,  Prev: The Tools submenu,  Up: The SW menu

The Help submenu
================

The Help submenu of the SW menu provides convenient commands to access help
information for Smallworld Emacs extensions as well as for standard Emacs
facilities.

Information about Smallworld extensions to Emacs is provided in HTML Help
format as well as in Emacs info format. The Help submenu lets you choose to
use either format explicitly.

   * Help using Info (key binding F1) Opens or goes to a buffer for Emacs info
     (normally named *info*) and shows the list of Smallworld major topics.

   * Help using HTML Help Opens an HTML Help window showing the Help topics
     for Smallworld Emacs extensions.

   * SW Menu Help Shows the Help topic for the SW menu in Emacs info format.

   * Smallworld Emacs Keys (key binding F2, F1) Shows the Help topic giving a
     summary of key bindings for Smallworld Emacs commands in Emacs info
     format.


File: EmacsForSWProducts.info,  Node: Gis mode and running a Smallworld session,  Next: Magik mode and editing Magik source code,  Prev: The SW menu,  Up: Top

Gis mode and running a Smallworld session
*****************************************

Smallworld Emacs extensions provide convenient facilities for running one or
more Smallworld sessions as Gis processes. Gis mode is defined for a buffer
running a Gis process; buffer names include *gis*, for example *gis*,
*gis*<2>, *gis swaf* and so on.

The SW menu provides controls to start a Smallworld session, or to load the
buffer for an existing Smallworld session into a window; key bindings for
these commands are also defined. For details, see *Note The SW menu::.

Gis mode is configured to use a variety of character faces when Font lock mode
is enabled. Specific character faces are defined for the Magik prompt and for
errors and tracebacks. Character faces defined for Magik mode are used for
symbols, strings and Magik keywords (see also *Note Font lock mode for
Smallworld buffers::).

* Menu:

* Sending commands to the Smallworld session::
* The Class Browser for a Smallworld session::
* Inspecting a Magik object::
* File loading with the drag and drop tool::
* Jump to error on loading a Magik source file::
* Facilities for tracebacks::
* Interface to the Magik Debugger of the Development Tools application::
* The Gis process filter::
* A command shell for the Gis process::
* The Gis command history of a Gis buffer::


File: EmacsForSWProducts.info,  Node: Sending commands to the Smallworld session,  Next: The Class Browser for a Smallworld session,  Up: Gis mode and running a Smallworld session

Sending commands to the Smallworld session
==========================================

The Magik prompt for the Smallworld session is shown in the Gis buffer.

To send a command to the session, type it at the prompt and press Enter. The
command is sent to the session only when it is syntactically complete, and the
terminating $ is sent automatically. This means that you can type or edit
commands which span two or more lines. Use F8 to send a command to the session
without a terminating $.

Terminal output from the Smallworld session is sent to the Gis buffer; a new
Magik prompt is shown when output from the previous command is complete.

There are convenient ways to recall a previous command to the current Magik
prompt:

   * Move the cursor to a previous command and press Enter.

   * Move the cursor to a previous command and start to edit that command. A
     copy of the command is pasted at the current Magik prompt and the copy is
     edited.

   * Use the Meta+P and Meta+N keys to step through previous commands and
     display them at the current Magik prompt.

   * Type the first few characters of a command and use the F2, P and F2, N
     keys to step through previous commands that start with those characters.
     For example, to recall the command load_file() it would probably be
     enough to type lo and then press F2, P.

You can fold the contents of the Gis buffer to show only the history of
commands which have been sent to the session. Use F2, Up Arrow or F2, Ctrl+P
to fold the contents of the buffer. Use F2, Down Arrow or F2, Ctrl+N to unfold
the buffer again. You can supply a numeric argument to F2, Ctrl+P and
F2, Ctrl+N; this allows you to fold or unfold a given number of commands in
the buffer.

If necessary, you can end the Smallworld session using the Gis menu control
Kill Gis Process (key binding Ctrl+C, Ctrl+C).

Key bindings and menu controls are also available for symbol completion and
for inserting an Electric Magik template. These are similar to the
corresponding facilities for Magik mode buffers (see *Note Magik mode and
editing Magik source code::).

For a summary of the key bindings available in this mode, see *Note
Interacting with a Smallworld session::.


File: EmacsForSWProducts.info,  Node: The Class Browser for a Smallworld session,  Next: Inspecting a Magik object,  Prev: Sending commands to the Smallworld session,  Up: Gis mode and running a Smallworld session

The Class Browser for a Smallworld session
==========================================

Each Smallworld session running as a Gis process may have its own Class
Browser process; the Class Browser process runs in a buffer whose name is
generated by adding *cb* as a prefix to the Gis buffer name. Class Browser
Processes on the SW menu provides a submenu of all the Class Browser processes.

When a Gis mode buffer is visible in an Emacs window, the general Class
Browser commands are configured to start or goto the Class Browser for the
corresponding Smallworld session. For example, F3, F3 runs or goes to the
Class Browser for the Smallworld session. In addition, F3, M and F3, C use the
current word in the Gis buffer as a method or class name respectively and
paste it into the mode line of the Class Browser.


File: EmacsForSWProducts.info,  Node: Inspecting a Magik object,  Next: File loading with the drag and drop tool,  Prev: The Class Browser for a Smallworld session,  Up: Gis mode and running a Smallworld session

Inspecting a Magik object
=========================

A Gis mode buffer provides two different facilities for inspecting a Magik
object in the session. The relevant commands prompt for a Magik expression;
the word at the current cursor position is available as a default. The
expression is evaluated in the context of the session to return the object to
inspect.

   * Dev Tools - Object Inspector (key binding F4, O or F2, Shift+X) opens an
     Object Inspector from the Development Tools application and displays the
     object. This command is relevant only if the Development Tools
     application is available in the Smallworld session; if necessary, the
     application is loaded and started in the session.

   * Deep Print (key binding F2, X) opens a standard Emacs Deep Print buffer
     and displays the object.


File: EmacsForSWProducts.info,  Node: File loading with the drag and drop tool,  Next: Jump to error on loading a Magik source file,  Prev: Inspecting a Magik object,  Up: Gis mode and running a Smallworld session

File loading with the drag and drop tool
========================================

A Gis mode buffer includes a tool to load a file into the Smallworld session
simply by dragging the file into the buffer. This can be used for Magik source
code, a load list, a module definition or a product definition. The file is
also loaded into an Emacs buffer.

This tool must be explicitly enabled, for example by using Drag and Drop on
the Toggle submenu of the Gis menu or by the Emacs command
gis-drag-n-drop-mode.


File: EmacsForSWProducts.info,  Node: Jump to error on loading a Magik source file,  Next: Facilities for tracebacks,  Prev: File loading with the drag and drop tool,  Up: Gis mode and running a Smallworld session

Jump to error on loading a Magik source file
============================================

When a Magik source code file is loaded into a Smallworld session, an error in
the file is reported.

Output from the Smallworld session is parsed for lines including the string
'on line'. This is highlighted if the mouse hovers over the line. You can then
use the middle mouse button or, if the cursor is on the line, Ctrl+Enter, to
load the file into a window and jump to the source code line at which the
reported error occurs.

Note that this is restricted to files named using the ASCII characters below
127. The use of ASCII characters above 128 or multibyte characters is not
supported because of conversion issues between Emacs, the filesystem and the
Smallworld session.


File: EmacsForSWProducts.info,  Node: Facilities for tracebacks,  Next: Interface to the Magik Debugger of the Development Tools application,  Prev: Jump to error on loading a Magik source file,  Up: Gis mode and running a Smallworld session

Facilities for tracebacks
=========================

Some useful facilities are provided for retrieving and viewing the tracebacks
which result from error conditions in the Smallworld session:

   * Previous Traceback and Next Traceback (key bindings F4, Up Arrow and
     F4, Down Arrow) move the cursor to the previous or next traceback in the
     Gis buffer.

   * Dev Tools - Traceback Viewer (key binding F4, T) uses a Traceback Viewer,
     provided by the Development Tools application, to display the most recent
     traceback. This is only available if the Development Tools application
     was running before the traceback was generated. If necessary, start the
     Development Tools application and generate the traceback again.

   * Print Traceback (key bindings F4, Shift+P and F2, =) find the most recent
     traceback in the buffer and prompt for whether to print it.

   * Save Traceback (key binding F4, Shift+S) find the most recent traceback
     in the buffer and save it as the file traceback.txt in the user's home
     directory. Any existing file with this name is overwritten.


File: EmacsForSWProducts.info,  Node: Interface to the Magik Debugger of the Development Tools application,  Next: The Gis process filter,  Prev: Facilities for tracebacks,  Up: Gis mode and running a Smallworld session

Interface to the Magik Debugger of the Development Tools application
====================================================================

A buffer in Gis mode provides a convenient command to load a method into a
Magik Debugger of the Development Tools application. This command is only
relevant if the Development Tools application is available in the Smallworld
session; if necessary, the application is loaded and started in the session.

   * Dev Tools - Debug Method (key binding is F4, D) with the cursor on a line
     in the buffer which contains a method invocation, opens a Magik Debugger
     and loads the method into it. For example, you can use a method
     invocation at the Magik prompt or in a traceback.


File: EmacsForSWProducts.info,  Node: The Gis process filter,  Next: A command shell for the Gis process,  Prev: Interface to the Magik Debugger of the Development Tools application,  Up: Gis mode and running a Smallworld session

The Gis process filter
======================

The output which a Smallworld session sends to the Gis buffer is normally
filtered by the Gis process filter. This enables many of the Smallworld Emacs
extensions to work as designed.

However, if the unfiltered output from the Smallworld session is required for
some other operation, the Gis process filter can be disabled; use Gis Process
Filter on the Toggle submenu of the Gis menu or the key binding F2, F.

Note that the Gis process filter should normally be enabled.


File: EmacsForSWProducts.info,  Node: A command shell for the Gis process,  Next: The Gis command history of a Gis buffer,  Prev: The Gis process filter,  Up: Gis mode and running a Smallworld session

A command shell for the Gis process
===================================

The Gis menu includes the control Gis Shell Process (key binding F4, $) to
start or goto a command shell with the same Smallworld environment as the
current Gis process. The command shell buffer name is formed by adding *shell*
to the beginning of the Gis buffer name, for example *shell**gis*.

On Windows, the shell process is started with the environment variables
defined in the environment.bat file used by the Smallworld session. The
Smallworld session may also have environment variables defined in a
gis_aliases file, but these are not available to the shell process.

On UNIX, the shell process uses the environment variables defined in the user
environment, for example in $SMALLWORLD_GIS/data/setup/SHARED_profile.

See System Administration: Environment variables for more details.


File: EmacsForSWProducts.info,  Node: The Gis command history of a Gis buffer,  Prev: A command shell for the Gis process,  Up: Gis mode and running a Smallworld session

The Gis command history of a Gis buffer
=======================================

On starting a new Smallworld session, the list of available Gis commands is
loaded into the minibuffer. The user can step through the commands, select
one, update it if required and execute it to start the new session.

   * For a current buffer which is not in Gis mode, the available Gis commands
     are defined by the following variables:
        - gis-command intended for a user's personal customisation, set in the
          .emacs file.

        - gis-command-default intended for an administrator to provide a
          general default for all users.

        - gis-command-history to provide one or more Gis commands as required
          by an individual user; defined in the .emacs file and can be set
          using Emacs customisation facilities.

   * For a current buffer which is in Gis mode, whether or not the Smallworld
     session is still running, the available Gis commands are defined by the
     Gis command history for the buffer.

When a Smallworld session is started, the actual command used is added to the
available Gis commands; this becomes the Gis command history for the session.

On the Gis menu, the Gis Command History submenu shows the command history for
the relevant Smallworld session.

   * While a Gis process is running in the buffer, the commands are all
     inactive. The command which was used to start the session is shown at the
     end of the list. The menu control Start New Smallworld Session (key
     binding Ctrl+U, F2, Z) is available to load the command history for the
     current session into the minibuffer so you can start a new session as
     required.

   * For a Gis buffer which does not have a running Gis process, the entries
     on the Gis Command History menu are enabled. You can select one to load
     it into the minibuffer and use it to start a new process in the current
     buffer.


File: EmacsForSWProducts.info,  Node: Magik mode and editing Magik source code,  Next: Using the Class Browser,  Prev: Gis mode and running a Smallworld session,  Up: Top

Magik mode and editing Magik source code
****************************************

The Magik major mode provides Emacs extensions for viewing, managing and
developing Smallworld Magik source code.

Facilities which are generally useful for viewing existing Magik code are
described first. There are separate subsections for:

   * Auto-complete mode for Magik buffers - see *Note Auto-Complete mode for
     Magik code::.

   * Facilities for inserting Magik code templates - see *Note Electric Magik
     and name completion facilities::.

   * Facilities for classifying methods, classes and procedures in Magik
     source code - see *Note Classification with the pragma tool::.

   * General facilities which are relevant for writing new code - see *Note
     Facilities for application developers::.

* Menu:

* Viewing Magik code::
* Emacs Code Browser for a Magik buffer::
* Method name display::
* Imenu and Speedbar for a Magik buffer::
* Transmitting Magik to a Smallworld session::
* Inspecting a Magik object and debugging a method::
* Auto-Complete mode for Magik code::
* Electric Magik and name completion facilities::
* Classification with the pragma tool::
* Facilities for application developers::


File: EmacsForSWProducts.info,  Node: Viewing Magik code,  Next: Emacs Code Browser for a Magik buffer,  Up: Magik mode and editing Magik source code

Viewing Magik code
==================

Font lock mode is defined for a Magik mode buffer. Different faces are used
for significant parts of Magik source code, such as comments, pragma
statements, Magik keywords, character strings and so on.

All the characters used as brackets, that is ( ), [ ] and { }, are recognised
in Magik mode. When the cursor is placed just after a closing bracket of any
kind, the preceding pair of brackets is highlighted.


File: EmacsForSWProducts.info,  Node: Emacs Code Browser for a Magik buffer,  Next: Method name display,  Prev: Viewing Magik code,  Up: Magik mode and editing Magik source code

Emacs Code Browser for a Magik buffer
=====================================

If Emacs Code Browser mode is enabled, the ECB layout can include windows to
show the directory tree, a list of source files in the current directory, the
contents of the current file and the history of recently visited files. Tabs
are available in the main window to switch between different files.


File: EmacsForSWProducts.info,  Node: Method name display,  Next: Imenu and Speedbar for a Magik buffer,  Prev: Emacs Code Browser for a Magik buffer,  Up: Magik mode and editing Magik source code

Method name display
===================

Optional display of the current method name is provided for a Magik mode
buffer. When enabled, the position of the cursor is used to define the current
method in the buffer and the name of this method is shown in the mode line.

Method name display is an independent implementation of the standard Emacs
Which function mode. It provides better support for a Magik mode buffer as
Which function mode cannot be easily configured to support the required
language features.

Enable method name display using Method Name Display on the Toggle submenu of
the Magik menu. Define the initial state of the display with the variable
magik-method-name-mode.


File: EmacsForSWProducts.info,  Node: Imenu and Speedbar for a Magik buffer,  Next: Transmitting Magik to a Smallworld session,  Prev: Method name display,  Up: Magik mode and editing Magik source code

Imenu and Speedbar for a Magik buffer
=====================================

A Magik buffer is configured so that the Imenu, or shortcut menu, contains
submenus for significant elements of the file.

The Speedbar for a Magik buffer includes an expanded directory path for the
file and an expandible item for the file itself showing the same entries as
the Imenu.


File: EmacsForSWProducts.info,  Node: Transmitting Magik to a Smallworld session,  Next: Inspecting a Magik object and debugging a method,  Prev: Imenu and Speedbar for a Magik buffer,  Up: Magik mode and editing Magik source code

Transmitting Magik to a Smallworld session
==========================================

A Magik mode buffer provides convenient facilities for transmitting Magik code
to a Smallworld session. If there is more than one Gis mode buffer then you
are prompted for the buffer to send the code to.

The menu controls are:

   * Transmit Method (key binding F7 or F2, F7 or F2, M) transmits the method
     at or after the position of the point in the current buffer to the
     Smallworld session.  On the Toggle submenu of the Magik menu, you can
     control the resulting position of the point in the buffer. Choose one of:

        - Move to End - moves the point to the end of the method, ready to
          transmit the next one.

        - Do Not Move Point - leaves the point at its current position; this
          is the standard initial option.

        - On Repeat, Move to End - the point is initially left unchanged; if
          you press the key again, the next method is transmitted and the
          point is left at the end of that method. Subsequent presses transmit
          the following method.

   * Transmit Region (key binding F8 or F2, F8 or F2, R) transmits the defined
     region of the current buffer to the Smallworld session.

   * Transmit Thing (key binding F2, Enter) transmits the top-level Magik
     language construction surrounding the point in the current buffer to the
     Smallworld session. The construction can be a method, a procedure
     definition, an invocation of def_slotted_exemplar() and so on. The
     construction must start against the left margin.

   * Transmit Buffer (key binding F2, B) transmits the whole contents of the
     current buffer to the Smallworld session.

   * Transmit $ Chunk (key binding F2, $) finds the chunk of Magik code,
     delimited by $ lines, which contains the point in the current buffer and
     transmits that code to the Smallworld session.

You can enable additional behaviour for a Magik mode buffer so that the cursor
is moved to the end of a method after it is transmitted. Use the Toggle
submenu of the Magik menu and select (or clear) Goto End of Method After
Transmit.


File: EmacsForSWProducts.info,  Node: Inspecting a Magik object and debugging a method,  Next: Auto-Complete mode for Magik code,  Prev: Transmitting Magik to a Smallworld session,  Up: Magik mode and editing Magik source code

Inspecting a Magik object and debugging a method
================================================

When there is a running Smallworld session, a Magik mode buffer provides a
direct interface to an Object Inspector and Magik Debugger provided by a
Development Tools application. You can also open an Emacs Deep Print buffer
for a Magik object. In all cases, if there are two or more Gis buffers then
you are prompted for the one to use.

There are two commands for inspecting a Magik object in the context of the
Smallworld session. Both commands prompt for a Magik expression; the word at
the current cursor position is available as a default. The expression is
evaluated in the context of the session to return the object to inspect.

   * Dev Tools - Object Inspector (key bindings F4, O and F2, Shift+X) opens
     an Object Inspector from the Development Tools application and displays
     the object. This command is only relevant if the Development Tools
     application is available in the Smallworld session; the application is
     loaded or started in the session as required. Any errors are reported to
     the Gis buffer as usual.

   * Deep Print (key binding F2, X) opens a standard Emacs Deep Print buffer
     and displays the object.

Note that the expression provided for both these commands must evaluate to a
Magik object in the context of the Smallworld session. For example, while a
global variable may have a defined value, a local variable is likely to be
unset. Use the Magik Debugger to investigate the values of local variables
while a method is running.

The command Dev Tools - Debug Method (key binding F4, D) opens a Magik
Debugger in the Development Tools application, if this is available in the
Smallworld session, and sends the method which contains the current cursor
position to the Magik Debugger. The Development Tools application is loaded or
started in the session as required. Any errors are reported to the Gis buffer
as usual.


File: EmacsForSWProducts.info,  Node: Auto-Complete mode for Magik code,  Next: Electric Magik and name completion facilities,  Prev: Inspecting a Magik object and debugging a method,  Up: Magik mode and editing Magik source code

Auto-Complete mode for Magik code
=================================

Auto-completion is available as popup help and on using Meta-[. If a
Smallworld session is running, a dedicated Class Browser buffer is used to
provide context-sensitive completion; this may be in addition to a Class
Browser process started by the user. Emacs Code Browser includes auto-complete
facilities.

Auto-completion is provided for the following Magik contexts:

   * _self.<method>: completions for <method> are derived from methods on the
     current _self exemplar.

   * condition.raise(<symbol>

   * !<dynamics>!

   * global objects and exemplars

   * <variable>.<method> where <variable> is assigned to <class>.new():
     completions for <method> are derived from methods on the <class> exemplar.


File: EmacsForSWProducts.info,  Node: Electric Magik and name completion facilities,  Next: Classification with the pragma tool,  Prev: Auto-Complete mode for Magik code,  Up: Magik mode and editing Magik source code

Electric Magik and name completion facilities
=============================================

Electric Magik facilities are useful when typing Magik source code. A number
of Magik keywords are recognised and replaced by an Electric Magik template.
For example:

     if

is replaced by:

     _if
     _then

     _endif

A list of keywords is given in the next section, *Note Keywords with an
Electric Magik template::.

Electric Magik facilities can be used in two ways:

   * Electric Magik tool: use Electric Magik Mode on the Toggle submenu of the
     Magik menu to enable or disable the Electric Magik tool.  When the tool
     is enabled, a complete keyword is replaced by the required template. The
     keyword must be terminated, for example by a space or tab character, and
     keywords are replaced in an appropriate context only.

   * Electric Magik name completion: F2, Spacebar, and Electric Template on
     the Magik menu, provide name completion for relevant Magik keywords by
     inserting the Electric Magik template. You can use this name completion
     at all times, and it is also available in a Gis mode buffer.  In this
     case, the current word is completed using the list of keywords with an
     Electric Magik template. If the current word corresponds to two or more
     such keywords then a list of available completions is offered.

     Using F2, Spacebar with the cursor on a blank line or following a space
     prompts for the template to insert.

The standard name completion command F2, Tab is also available in a Magik mode
buffer. This attempts to complete the current word as a file name or as a line
in the buffer and does not use the Electric Magik templates.

* Menu:

* Keywords with an Electric Magik template::


File: EmacsForSWProducts.info,  Node: Keywords with an Electric Magik template,  Up: Electric Magik and name completion facilities

Keywords with an Electric Magik template
----------------------------------------

The following keywords, which introduce a Magik compound statement and have a
corresponding _end key word, are recognised anywhere on a line:

     abstract, block, catch, def_slotted_exemplar, if, iter, lock,
     loop, proc, method, private, protect

The following keywords are also recognised anywhere on a line:

     for, pragma

A number of additional method keywords are recognised at the start of a line
only; the template includes the class name. For example:

     def_property

is replaced by

     _pragma(<pragma_classification>)
     <class_name>.def_property(:,
        ##
        ##
        ##
        )
     $

where <pragma_classification> and <class_name> are given by other methods in
the file. For details of a pragma classification, see *Note Classification
with the pragma tool::.

The following method keywords are recognised at the start of a line:

     define_condition, define_shared_constant, define_shared_variable,
     def_property, def_mixin, define_slot_access, define_pseudo_slot,
     define_binary_operator_case


File: EmacsForSWProducts.info,  Node: Classification with the pragma tool,  Next: Facilities for application developers,  Prev: Electric Magik and name completion facilities,  Up: Magik mode and editing Magik source code

Classification with the pragma tool
===================================

A method, class, procedure or condition is classified by using a pragma
statement starting with the _pragma keyword. For example:

     _pragma(classify_level=basic,topic={trail},usage={external})
     _method trail.fillet(rad)
        ##
        ##
        >> ...
     _endmethod

Accurate and appropriate classification provides well defined programming
interfaces for different types of customisation and helps in documenting the
source code.

   * A classification by level (basic, advanced, restricted, debug or
     deprecated) is required for all methods, procedures and classes.
     Classification levels for conditions are basic, advanced and restricted.

   * In addition, methods and procedures may have a declared usage (such as
     external, subclassable or redefinable and all combinations).

   * All methods, procedures and classes should be associated with one or more
     topics. A list of existing topics for a Smallworld installation is
     provided in a data file.

Note that slot access methods, shared constants and shared variables should
also have a pragma statement for classification.

For more information, see *Note Introduction to method classification for the
Class Browser::.

* Menu:

* Creating _pragma statements::


File: EmacsForSWProducts.info,  Node: Creating _pragma statements,  Up: Classification with the pragma tool

Creating _pragma statements
---------------------------

The keyword pragma is recognised by Magik template insertion (F2, Spacebar)
and by Electric Magik mode; the keyword is replaced by a template which
matches the previous _pragma statement in the file.

When the cursor is placed within a _pragma statement in a Magik mode buffer,
the characters / and \ are used to select available options:

   * With the cursor on the classify_level element, pressing / or \ cycles
     through the available values, such as basic, advanced, restricted, debug
     and deprecated. If deprecated is selected then a template public comment
     is inserted to give more details about the reason for the classification
     and the method to use instead.

   * With the cursor on the usage element, pressing / or \ cycles through the
     available values, such as external, subclassable, redefinable and
     relevant combinations.

   * With the cursor on the topics element, pressing / or \ opens a topic
     selection buffer where relevant topics can be marked and included. The
     list of available topics is generated from files named pragma_topics
     found in the \data\doc subdirectories of the module or product, and from
     $SMALLWORLD_GIS\data\doc\pragma_topics.


File: EmacsForSWProducts.info,  Node: Facilities for application developers,  Prev: Classification with the pragma tool,  Up: Magik mode and editing Magik source code

Facilities for application developers
=====================================

Some facilities of a Magik mode buffer are most relevant to Smallworld
application developers who are writing and debugging Magik code.

When typing in a Magik mode buffer, automatic indentation is provided on
pressing Enter or Tab. An underscore character _ is added to the beginning of
a recognised Magik keyword. The number of spaces which correspond to each
indentation level is defined by the variable magik-indent-level.

When typing a comment, starting with # or ##, the comment is automatically
formatted into lines with a standard maximum length of 70 characters by
inserting a newline, appropriate indentation and # or ## between words of the
comment. The maximum line length is defined by the variable fill-column, see
also *Note Facilities for comments::.

* Menu:

* Copying and comparing Magik methods::
* Facilities for tracing and debugging::
* Facilities for comments::


File: EmacsForSWProducts.info,  Node: Copying and comparing Magik methods,  Next: Facilities for tracing and debugging,  Up: Facilities for application developers

Copying and comparing Magik methods
-----------------------------------

Magik mode provides convenient facilities to copy part of the contents of one
buffer to another, temporary buffer. This is useful for development and
debugging. The commands are as follows:

   * Copy Method to Work Buffer (key binding F4, M) copies the method which
     includes the cursor position to the current work buffer. If necessary, a
     work buffer is created with a name based on the class name.

   * Set Work Buffer Name (key binding F4, N) prompts for the name of the
     current work buffer; this buffer is used for subsequent copy operations.

   * Copy Region to Work Buffer (key binding F4, R) copies the current region
     of the buffer to the current work buffer. You are promoted for the name
     of the work buffer if this has not been explicitly set.

The following commands are also useful when copying and comparing methods

   * Mark Method (key binding Ctrl+Meta+H or F9) defines the method which
     contains the current cursor position as a region in the current buffer.
     The method can then be conveniently copied to another buffer.  Magik mode
     can be configured so that, after marking a method, the point is defined
     as either the end or the beginning of the method. On the Toggle submenu
     of the Magik menu, use Point at End of Marked Region; the initial state
     is controlled by the variable magik-mark-method-exchange.

   * Copy Method (key binding F4, C and F6) defines the method which contains
     the current cursor position as a region in the current buffer and copies
     it for pasting with standard Emacs commands Ctrl+Y or middle-mouse click
     (this is equivalent to Ctrl+Meta+H followed by Meta+W).

   * Compare Methods (key binding F4, W and F4, E) provide an interface to the
     standard Emacs commands compare-windows and ediff-regions-wordwise to
     compare the methods in two Magik files. Load the files to be compared
     into separate buffers and place the cursor within a corresponding method
     in each file.  See the Emacs documentation for more information on the
     compare-windows and ediff-regions-wordwise commands.


File: EmacsForSWProducts.info,  Node: Facilities for tracing and debugging,  Next: Facilities for comments,  Prev: Copying and comparing Magik methods,  Up: Facilities for application developers

Facilities for tracing and debugging
------------------------------------

An Emacs buffer in Magik mode provides a facility for conditional compilation
of code in a file. If you start a line of code with the string #DEBUG then it
is normally transmitted and treated as a comment. However, if compilation of
such statements is enabled, the string #DEBUG is removed before transmission
so that the statement is compiled and executed as usual.

   * Use Enable #Debug Statements on the Toggle submenu of the Magik menu to
     enable or disable compilation of #DEBUG statements.

   * The initial state of the toggle is defined by the Emacs variable
     transmit-magik-debug.

The menu control Add Debug Statement (key binding F4, S) provides a convenient
way of adding a debug statement. The statement is an invocation of show() with
arguments to show the current line in the method and a symbol and variable
derived from the relevant line. For example, the following method has a debug
statement added for the fifth line:

     _method meal_menu.init(plugin)
         ## Create a property list to hold the items.
         _super.init()
         .items << property_list.new()
         #DEBUG show("nil:Line 5",:plugin,plugin)
         .plugin << plugin
         >> _self
     _endmethod

The menu control Trace Statement (key binding F2, T) adds a debug statement to
show the current position in the method:

     _method meal_menu.init(plugin)
         ## Create a property list to hold the items.
         _super.init()
         .items << property_list.new()
         #DEBUG show("nil:Line 5",:plugin,plugin)
         .plugin << plugin
         write("+++ >> _self +++")
         >> _self
     _endmethod

You can also evaluate an expression in the context of a current Smallworld
session and inspect the resulting Magik object, or send a method to the Magik
Debugger of the Development Tools application; see *Note Inspecting a Magik
object and debugging a method::.


File: EmacsForSWProducts.info,  Node: Facilities for comments,  Prev: Facilities for tracing and debugging,  Up: Facilities for application developers

Facilities for comments
-----------------------

An Emacs buffer in Magik mode provides special facilities for adding comments
to a Magik method. When a comment line exceeds the specified maximum length, a
new line is started with appropriate indent and comment signifier (# or ##).
The maximum length of a comment line is defined by the variable fill-column;
the standard value is 70.

   * Comment Region (key binding F2, #) converts each line in the current
     region of the buffer into a Magik comment by adding a leading #. Repeat
     this command to convert the region into a public comment (each line
     starting ##).

   * Uncomment Region (key binding F2, Esc, #) remove a leading # from each
     line in he region. This command can also be used to convert a public
     comment to an internal comment.

   * Comment Heading (key binding F2, H) converts the current comment line to
     a comment heading by making all characters upper case, adding a space
     between each one and adding a line of underscores.

   * Fill Comment (key binding F2, Q) reformat a line starting with # or ## as
     a set of comment lines no longer than the specified maximum width. This
     is useful when editing an existing comment line so that it is longer than
     the required length.

You can update the maximum width of a comment line with the standard Emacs
command set-fill-column. For example, use Meta+X, set-fill-column or
Ctrl+X, F. Alternatively, include a line such as the following in your .emacs
file:

     (setq fill-column 100)


File: EmacsForSWProducts.info,  Node: Using the Class Browser,  Next: Modes for other Smallworld files,  Prev: Magik mode and editing Magik source code,  Up: Top

Using the Class Browser
***********************

The Class Browser is used to select and display methods for a current
Smallworld session or for a specific method finder file by using the method
name, class name or classification data. A compact list of methods and class
names can be shown; alternatively the list can be expanded to show the public
comments and arguments for each method.

An Emacs buffer running a Class Browser process uses the Class Browser major
mode. This mode is extensively customised for use by a Class Browser; for
example, all typing goes directly to the mode line and the method display is
automatically updated to reflect the current strings and options in the mode
line.

The CB menu is provided in the Emacs menu bar for a buffer in Class Browser
mode. This menu provides all the custom controls required for interaction with
a Class Browser process. Details of the controls are given in this section;
for a summary of the commands, see *Note Interacting with a Class Browser
process::.

Classification data for the method is provided by the application developer in
its pragma statement; see *Note Introduction to method classification for the
Class Browser:: for an overview.

A Smallworld installation provides alternative facilities for viewing the
methods and classes defined by a method finder file. The Class Documentation
provides similar information to a Class Browser but uses HTML Help format to
display it.

For details, see Development Environment: Class Documentation.

* Menu:

* Introduction to method classification for the Class Browser::
* Getting started with the Class Browser::
* Using the mode line for a Class Browser buffer::
* Using the Class Browser options::


File: EmacsForSWProducts.info,  Node: Introduction to method classification for the Class Browser,  Next: Getting started with the Class Browser,  Up: Using the Class Browser

Introduction to method classification for the Class Browser
===========================================================

Customisers and application developers who are changing or adding to a
Smallworld installation need information about the methods, procedures and
classes which make up the external interface of Smallworld Core and the
existing applications. For example, they may need to know about the arguments
to a method, what it does, what is returned and what errors and conditions may
be raised.

The Class Browser provides facilities for selecting a set of methods
(including slot-access methods, shared variables and shared constants) by
using their name or partial classification data and to see their arguments,
full classification data and public comments. The Class Browser is also used
to explore the class hierarchy of the object classes in a session, and can
access a selected Magik source code file.

Information about the protocols (that is, methods and procedures) and classes
in a Smallworld session is handled by a separate Method Finder process which
is started when needed and uses a method finder file (with extension .mf)
corresponding to the image file for the Smallworld session to provide its data.

See *Note The Method Finder ACP:: for more details.

* Menu:

* Summary of classification for protocols and classes::


File: EmacsForSWProducts.info,  Node: Summary of classification for protocols and classes,  Up: Introduction to method classification for the Class Browser

Summary of classification for protocols and classes
---------------------------------------------------

The author of a Magik method, procedure or object class provides a pragma
statement to classify it; the classification can then be used to select
methods for display in the Class Browser. A Magik mode buffer provides special
facilities for creating pragma statements; see *Note Classification with the
pragma tool:: for details.

There are three elements to the classification of protocols and classes:
classification level, usage and topic. All classes and protocols in Smallworld
products are fully classified in this way; an application developer is
responsible for classifying new application-specific code.

A summary of the classification scheme is given here. See Magik Language for
full details of defining and classifying classes, methods and procedures.

Classification level
     The following classification levels are available:

        - basic - classes and protocols at the basic level comprise the main
          interface to the application. This interface is in common usage and
          intended for minor customisation of existing functions. Subsequent
          releases of the product will maintain this interface.

        - advanced - classes and protocols at the advanced level comprise the
          remainder of the external interface to the application. This
          interface is intended for more extensive programming which cannot be
          achieved by the use of basic classes and protocols. Subsequent
          releases of the product will maintain this interface.

        - restricted - classes and protocols at this level are intended for
          use only by the software module developer. Unless subclassable (see
          below) these classes and protocols do not constitute a supported
          interface and are subject to change.

        - debug - classes and protocols at this level are available for use
          during code development, especially for debugging, but should not be
          included in completed applications for production use. The
          functionality of these classes and protocols is likely to be
          provided in future releases; detailed facilities may change and the
          output from descriptive protocols may also change.

        - deprecated - classes and protocols at this level have previously
          been classified as basic or advanced but they will be reclassified
          as restricted, or even removed, at a future release. A list of
          deprecated classes and protocols is included with the documentation
          of each release.

Topic
     Each class or protocol may be associated with one or more topics. There
     is a set of topics which is relevant to all Smallworld applications (such
     as geometry, scrapbook, trail) and specialised applications may introduce
     their own topics.

     Files named pragma_topics hold the list of topics which are available for
     application code developed within a product. A pragma topics file can be
     provided in the \data\doc subdirectory of a module or product; a standard
     file, listing the topics used in the Smallworld Core product, is provided
     in $SMALLWORLD_GIS\data\doc\pragma_topics. An application developer can
     create and update these files as required.

Usage
     Classes and protocols may be assigned one or more of these usages:

        - subclassable - designed to be subclassed and will be especially well
          commented. A class with usage subclassable will normally have
          several methods which also have this usage.  A method or class may
          be classified as restricted, subclassable which means that it may
          not be invoked or used directly but it can be subclassed; interfaces
          to such methods and classes will remain compatible between releases.

          A subclass method can always invoke its super, even if this is
          restricted.

        - redefinable - methods defined with this usage are intended to be
          redefined; that is, they provide a template or example of the sort
          of behaviour which is required. Like subclassable methods, they will
          be well commented and may be redefined even if restricted. This
          usage does not apply to classes.

     Existing methods and classes may also be classified with usage external
     or internal; these classifications should be ignored.


File: EmacsForSWProducts.info,  Node: Getting started with the Class Browser,  Next: Using the mode line for a Class Browser buffer,  Prev: Introduction to method classification for the Class Browser,  Up: Using the Class Browser

Getting started with the Class Browser
======================================

The Class Browser does three things:

   * displays methods and procedures

   * shows the class hierarchy

   * jumps to the source code of a method when this is available

The Class Browser major mode is used for all Class Browser buffers. For the
main display of methods and procedures, five different layouts are available
showing various levels of detail. Font lock mode is defined for Class Browser
buffers with different character faces used for significant parts of the
display. Many facilities of the Class Browser are controlled from the mode
line of a Class Browser buffer; an options panel is available for some
detailed controls.

Slot-access methods, shared variables and shared constants are all handled by
the Class Browser in the same way as normal methods. Procedures are treated as
though they are defined on the dummy object class <global>. Conditions are
treated as though defined on the pseudo-class <condition>.

* Menu:

* Starting the Class Browser::
* Displaying methods and choosing a layout::
* Displaying globals procedures and conditions::
* Real-time display::
* Displaying a selected method or class::
* Showing the class hierarchy::
* Jumping to the source of a method::
* Showing the buffer for the Smallworld session::
* Hiding and closing a Class Browser::


File: EmacsForSWProducts.info,  Node: Starting the Class Browser,  Next: Displaying methods and choosing a layout,  Up: Getting started with the Class Browser

Starting the Class Browser
--------------------------

A Class Browser gives access to the methods and classes in a session or image
via a Method Finder process. Use the Class Browser submenu on the SW menu of
an Emacs session or a key binding such as F3, F3. For details, see *Note Run
or goto a Class Browser session::.

   * If you start a Class Browser for an active Smallworld session then the
     methods of this session are automatically available to the Class Browser.
     This means that if you load a file containing a new method into your
     session then the method is available immediately from the Class Browser,
     even before you have saved an image for the session.  In this case, the
     Class Browser buffer name is created by adding *cb* to the beginning of
     the Gis buffer name (for example, *cb**gis*).

   * If you start the Class Browser with no active session, or explicitly
     using Ctrl+U, F3, F3, then you are prompted for the path of a method
     finder file. Methods and classes defined in this file are available to
     the Class Browser and the information is not changed when source code is
     loaded into any session.  In this case, a default buffer name is
     constructed from *cb* and the name of the method finder file; you can
     provide a different buffer name if required.

There will be a brief delay while the method finder file is loaded and then
you will see the initial selection of methods and procedures using default
options and layout.


File: EmacsForSWProducts.info,  Node: Displaying methods and choosing a layout,  Next: Displaying globals procedures and conditions,  Prev: Starting the Class Browser,  Up: Getting started with the Class Browser

Displaying methods and choosing a layout
----------------------------------------

The main purpose of the Class Browser is to display selections of the Magik
methods in a Smallworld session or method finder file.

The mode line of the Class Browser buffer is used to make up method name and
class name patterns; the Class Browser displays those methods which match the
patterns with the current option settings and layout. The Class Browser
normally displays only the first 200 methods which match the current query;
this limit can be removed if required.

Any characters you type in the Class Browser buffer are inserted into the mode
line at its cursor (by default, this is shown as a reverse video space but
another character can be configured). You can click with the mouse, use the
horizontal arrow keys or press Tab to move the mode line cursor. See *Note
Using the mode line for a Class Browser buffer:: for full details. The current
query is shown at the beginning of the method display.

For example, you could define the mode line with method and class name
patterns such as:

     distance IN area

With the default options to show basic and debug methods, locally defined or
inherited from any class except object, and the default layout showing method
and class names, this might result in a display such as:

     *** The 8 basic or debug methods containing the string `distance'
     understood by classes containing the string `area'.

     boundary_distance_to()  IN  sw:area_geometry_mixin    B
     boundary_distance_to()  IN  sw:area_set_mixin    B
     boundary_distance_to_within?()  IN  sw:area_geometry_mixin    B
     boundary_distance_to_within?()  IN  sw:area_set_mixin    B
     distance_to()  IN  sw:connected_geometry_mixin    B
     distance_to()  IN  sw:geometry_set_mixin    B
     distance_to_within?()  IN  sw:connected_geometry_mixin    B
     distance_to_within?()  IN  sw:geometry_set_mixin    B

You can step through the available layouts to unfold the display and show more
detail by using the menu command Unfold or by pressing F3, Down Arrow.
Successive layouts show the arguments, public comments and full classification
information, resulting in a display such as:

     boundary_distance_to()  IN  sw:area_geometry_mixin    B geometry
      a_geom

         ##  Return the minimum distance between _SELF's boundary and
         ##  A_GEOM - considering its boundary if this is an area
         ##  geometry (ie. does not return 0 if _SELF contains or is
         ##  inside A_GEOM).

You can fold the display to show less detail by using menu command Fold or
pressing F3, Up Arrow. The most folded display shows method names only.

     boundary_distance_to()
     boundary_distance_to_within?()
     distance_to()
     distance_to_within?()


File: EmacsForSWProducts.info,  Node: Displaying globals procedures and conditions,  Next: Real-time display,  Prev: Displaying methods and choosing a layout,  Up: Getting started with the Class Browser

Displaying globals procedures and conditions
--------------------------------------------

Use the dummy class <global> to display globals and procedures in the Class
Browser; the class name can be abbreviated to just '<g':

     *** The 4 basic or advanced or debug methods containing the string
     `!print' understood by classes containing the string `<global>'.

     !print_delimiter!  IN  <global>    A
     !print_depth!  IN  <global>    A
     !print_float_precision!  IN  <global>    A
     !print_length!  IN  <global>    B

Use the dummy class <condition> to display conditions in the Class Browser;
the class name can be abbreviated to just '<c'.

Note:

   * Conditions are only known to the Class Browser if the list of arguments
     is the data name list for the condition, and is made up of symbols.

   * Many conditions do not have a classification level; use the mode line or
     options panel to override the flags which select particular
     classification levels (for example, click F in the mode line).

   * You can fold and unfold the display for globals, procedures and
     conditions to show different amounts of detail in the same way as for a
     method display.


File: EmacsForSWProducts.info,  Node: Real-time display,  Next: Displaying a selected method or class,  Prev: Displaying globals procedures and conditions,  Up: Getting started with the Class Browser

Real-time display
-----------------

The Class Browser refreshes its display after every keystroke; there is no
'start' or 'go' button. If you load Magik code into the session, any methods
are available but the Class Browser does not refresh the display immediately.
You must type something in the mode line to cause the Class Browser to refresh
the display and include the new methods if appropriate.

The normal limit of 200 methods in the Class Browser display results in a
reasonable response even if a very general query is specified. If the 200
limit is removed then a general query may take some time to process, and the
display will lag behind the keystrokes.


File: EmacsForSWProducts.info,  Node: Displaying a selected method or class,  Next: Showing the class hierarchy,  Prev: Real-time display,  Up: Getting started with the Class Browser

Displaying a selected method or class
-------------------------------------

A Class Browser command to display a single method is available from any Emacs
buffer. Position the cursor on a word and use Paste Method in CB (key binding
F3, M) on the Class Browser submenu of the SW menu). This will set up the
current word as the method name pattern and hence display the selected method
only.

You may have to make other changes to the Class Browser buffer before you see
the method display that you expect:

   * Any existing class name pattern in the Class Browser is not changed; you
     can use F3, / before F3, M to clear the class name pattern.

   * Check that the option settings shown on the mode line are appropriate;
     for example, you may have to alter the classification level flags to show
     the required method.

   * The same command can be used to display a procedure in the Class Browser,
     but the initial method name pattern includes the terminating brackets
     which you must remove from the mode line.

You can also use the Class Browser to display methods for a selected class.
Position the cursor on a word in any Emacs buffer and use Paste Class in CB
(key binding F3, C) on the Class Browser submenu of the SW menu). This will
set up the current word as the class name pattern and hence display methods
for this class only.

Note that any existing method name pattern is not changed, so you may not see
the methods which you expect. Also, check that the option settings shown on
the mode line are appropriate.

For example, if you have a Magik traceback you can see the relevant method by
moving the cursor onto the class name and pressing F3, C, then moving the
cursor onto the method name and pressing F3, M.


File: EmacsForSWProducts.info,  Node: Showing the class hierarchy,  Next: Jumping to the source of a method,  Prev: Displaying a selected method or class,  Up: Getting started with the Class Browser

Showing the class hierarchy
---------------------------

The full Magik class hierarchy for a session or image file contains over a
thousand classes and many thousands of connections. The Class Browser shows
part of the hierarchy at a time: the superclasses (ancestors) and subclasses
(descendents) of a single class which is selected as the focus of the display.
Class comments for the selected class are also shown.

In a Class Browser buffer, select the class to become the focus of the class
hierarchy display by middle-clicking the class name. Alternatively, use Family
Tree (key binding F3, F) on the CB menu; this offers the current word in the
buffer as a default class name; you must supply a full class name including
package name.

The Class Browser normally opens a second buffer (the name is prefixed with
*cb2*) to contain the class hierarchy; this will usually be shown in a
different window from the main Class Browser buffer.

For example, you could arrange the method display to show methods in the class
bag and then display the class hierarchy, and class comment, for that class.

     sw:lock_support_mixin .....     A
                 sw:object ....     B
             sw:slotted_format_mixin .........*     A
         sw:hash_helper ..     RESTRICTED!
             sw:basic_collection_mixin .........*     B
         sw:add_collection_mixin ......     A
         sw:remove_collection_mixin ......     B
         sw:identity_collection_mixin ......     RESTRICTED!
         sw:serial_structure_mixin .........*     RESTRICTED!
     sw:bag  B
         sw:equality_bag      RESTRICTED!

      a collection of arbitrary elements with duplicates

The Class Browser uses a compact textual representation for the class
hierarchy display, modelled on the Magik print_ancestry() and
print_hierarchy() procedures.

   * Superclasses (ancestors) are shown above the target object class;
     subclasses (descendents) are shown below it.

   * The immediate parents and children of the target class are indented by
     one tab, their parents and children by two tabs and so on. Thus, bag has
     five parents and three grandparents.

   * One or more periods '.' beside a superclass indicates that there are
     other subclasses (children) of that class; '.' beside a subclass
     indicates that there is another superclass (parent) of that subclass.

   * The public comment for the target class (if there is one) is appended to
     the end of its class hierarchy.


File: EmacsForSWProducts.info,  Node: Jumping to the source of a method,  Next: Showing the buffer for the Smallworld session,  Prev: Showing the class hierarchy,  Up: Getting started with the Class Browser

Jumping to the source of a method
---------------------------------

From a Class Browser buffer you can display the source code of a selected
method, if the source code is available in the installed product. Position the
cursor on a method name and use Jump to Source (key binding F3, J) on the SW
menu or CB menu to perform the jump.

The Class Browser will open a new Magik mode buffer onto the required file (or
show the buffer if it is already open). This buffer will normally be shown in
a different Emacs window from the main Class Browser buffer.

Note the following points:

   * The new buffer is a normal Magik mode buffer and not identified as
     belonging to the Class Browser.

   * Some of the low-level source code is confidential and is not included
     with the product; methods in this source code are included in the Class
     Browser display.

   * Methods to access slots, shared variables and so on can be investigated
     in the same way as other methods; jumping to the source of such a method
     will open a buffer showing the source code which defines the method, for
     example, define_slot_access() or def_property().

   * You cannot jump directly to the exemplar definition for a class - the
     call to def_slotted_exemplar() - but a class is usually defined at the
     beginning of the file which includes its methods. Thus you can often find
     the exemplar definition of a class by jumping to the source code of a
     method and moving to the beginning of the file.

   * The Emacs variable cb-jump-replaces-cb-buffer controls whether the new
     Magik buffer is shown in a different window; this is the standard
     behaviour with the variable set to nil. If the variable is set to true,
     the Magik buffer replaces the Class Browser buffer. This behaviour can be
     useful if you want to compare the source code for the method with the
     contents of another Magik file.

This command is also available for any buffer from the Class Browser submenu
of the SW menu. In this case, the word defined by the position of the cursor
is treated as a method name and pasted into a Class Browser buffer; the class
name is cleared. If the resulting Class Browser display includes just one
method then its source code is shown in a new Magik mode buffer; otherwise,
you can use the Class Browser buffer to select the required entry in the
method display and jump to it.


File: EmacsForSWProducts.info,  Node: Showing the buffer for the Smallworld session,  Next: Hiding and closing a Class Browser,  Prev: Jumping to the source of a method,  Up: Getting started with the Class Browser

Showing the buffer for the Smallworld session
---------------------------------------------

When a Class Browser is started for a Smallworld session, you can display the
Gis buffer for the Smallworld session using the CB menu control Gis Process
(key binding F3, G) on the CB menu. You can also click the name of the Gis
buffer in the mode line of the Class Browser buffer to have the same effect.

When a Class Browser is started for a Smallworld session, and the Smallworld
session also has a running shell process, you can display the shell buffer
using the CB menu control Gis Shell Process (key binding F3, $). This control
is disabled unless it is relevant to the current Class Browser buffer.


File: EmacsForSWProducts.info,  Node: Hiding and closing a Class Browser,  Prev: Showing the buffer for the Smallworld session,  Up: Getting started with the Class Browser

Hiding and closing a Class Browser
----------------------------------

Once a Class Browser is started, it is convenient to leave it running and to
hide its buffers when they are not required.

On the CB menu, use the Hide control (key binding F3, H or Spacebar) to hide a
secondary Class Browser buffer (used for the class hierarchy) if it is shown,
or a main Class Browser buffer if a secondary one is not shown. Thus the Class
Browser buffers can be progressively hidden, leaving other Emacs buffers
visible.

Note that any Magik mode buffers which have been opened from the Class Browser
will not be hidden by this command as they are normal buffers and are not
linked to the Class Browser.

You can close the Class Browser completely by closing its main buffer (use the
standard Emacs command: on the Emacs File menu, use Kill Buffer, or press
Ctrl+X, K).


File: EmacsForSWProducts.info,  Node: Using the mode line for a Class Browser buffer,  Next: Using the Class Browser options,  Prev: Getting started with the Class Browser,  Up: Using the Class Browser

Using the mode line for a Class Browser buffer
==============================================

For a Class Browser buffer, the mode line gives useful information about the
current method display of the Class Browser and is used for specifying method
and class names and for defining some control panel settings.

The mode line shows the following information in successive fields:

   * The number of methods in the current display, or the current limit on the
     number of methods to display. For example:
          18  or  >200

   * The method and class name patterns used for the current method display.
     For example:
          datab IN app

     The mode line cursor shows the position in one of these patterns where
     alphanumeric characters are inserted; by default the mode line cursor is
     a reverse video space character.

   * Some of the current option settings, with '*' for enabled settings. For
     example:
          *b *a  s  r *d  <loc>  F  T  2  dp  rs

     When you place the cursor over one of these options, short help text is
     shown in the echo line. See *Note Using the Class Browser options:: for
     more details of the option settings.

   * The name of the Gis buffer or method finder file for the Class Browser;
     for example:
          *gis*  or  swaf_open.mf

The mode line recognises the normal Emacs commands. Alphabetic and numeric
characters are inserted at the mode line cursor and horizontal arrows, cut,
copy and paste commands have the usual effect.

The following are the most useful commands for the mode line:

Tab      Move (hop) the mode line cursor to the other name pattern
Del      Delete the character preceding the mode line cursor
/        Clear the current name pattern
Ctrl+A   Go to the beginning of the name pattern
Ctrl+E   Go to the end of the name pattern

Note that the method display is updated as characters are typed; any change in
the name pattern may alter the method display. The characters semicolon (;)
and space have special meanings for a Class Browser buffer.

The method display normally contains all those methods whose method name and
class name match the current name pattern; you can use '^' to match the
beginning of a name and '$' to match the end of a name.

For example:

   * rope as a class name pattern will match classes such as 'rope_mixin' or
     'property_list' as well as 'rope'

   * ^rope matches classes starting with the string 'rope'

   * rope$ matches classes ending with the string 'rope'

   * ^rope$ matches only the exact class, 'rope'

The mode line character is defined by the variable cb-mode-line-cursor; you
can use the command cb-set-cursor to change it.


File: EmacsForSWProducts.info,  Node: Using the Class Browser options,  Prev: Using the mode line for a Class Browser buffer,  Up: Using the Class Browser

Using the Class Browser options
===============================

Using Options on the CB menu (key bindings F3, S or ;) displays a control
panel in a secondary Class Browser buffer; use this to specify the Class
Browser options. You can set filters for methods and classes depending on
their level, usage and topic classification, and you can control the layout of
the method display.

Default option settings are provided when the Class Browser is first started;
you can restore these settings at any time by using Reset All Options (key
binding F3, R) on the CB menu.

You can change the setting of any option by middle-clicking it (in the control
panel); this will have an immediate effect on the methods displayed in the
main Class Browser buffer. If you enable Font lock mode for this buffer, it is
easier to see which options are enabled.

The current settings of the pragma flags, inheritance and override options are
shown in the mode line; you can also change these settings by clicking the
relevant entry in the mode line.

To hide the control panel, use Hide on the CB menu (key bindings are F3, H and
Spacebar).

* Menu:

* Pragma flags::
* Inheritance options::
* Layout options::
* Topic options::
* Overrides::
* The overall method filter::


File: EmacsForSWProducts.info,  Node: Pragma flags,  Next: Inheritance options,  Up: Using the Class Browser options

Pragma flags
------------

Seven pragma flags are provided in the Class Browser control panel. Each flag,
when selected (that is, with a '*' beside it) includes methods with the
corresponding classification level or usage as candidates for the method
display.

The flags are:

   * basic (shown in the mode line as b)

   * advanced (shown in the mode line as a)

   * subclassable (shown in the mode line as s)

   * redefinable (shown in the mode line as r)

   * debug (shown in the mode line as d)

   * deprecated (shown in the mode line as dp)

   * restricted (shown in the mode line as rs)

Note that one of these flags must be selected; one of basic and advanced is
selected automatically if you attempt to turn all the flags off.

Unclassified methods (that is, methods with no classification level) are shown
only if the pragma flag setting is overridden (see *Note Overrides::).


File: EmacsForSWProducts.info,  Node: Inheritance options,  Next: Layout options,  Prev: Pragma flags,  Up: Using the Class Browser options

Inheritance options
-------------------

Three levels of inheritance are provided to control the method display:

   * local-only - when set includes as candidates for the method display only
     local methods defined directly on classes which match the current class
     name pattern. Shown in the mode line as <loc>.

   * inherit not "object" - when set, includes as candidates for the method
     display local and inherited methods defined on classes which match the
     current class name pattern but excludes methods defined on class object.
     This is convenient as class object is a very common ancestor and defines
     many standard methods. Shown in the mode line as <obj>.

   * inherited - when set, includes as candidates for the method display local
     and all inherited methods defined on classes which match the current
     class name pattern; includes methods defined on class object. Shown in
     the mode line as <inh>.

Note that setting one of these levels automatically sets any lower levels.

Clicking the mode line entry steps through the three settings in the order
<loc>, <obj>, <inh>.


File: EmacsForSWProducts.info,  Node: Layout options,  Next: Topic options,  Prev: Inheritance options,  Up: Using the Class Browser options

Layout options
--------------

The layout options control the details which are shown in the method display.
Selecting layout options explicitly can give finer control than folding and
unfolding the display. The five elements of the method display are:

   * method names

   * class names

   * arguments to a method

   * public comments

   * full classification details.

Each element can be selected individually; see *Note Displaying methods and
choosing a layout:: for an example.


File: EmacsForSWProducts.info,  Node: Topic options,  Next: Overrides,  Prev: Layout options,  Up: Using the Class Browser options

Topic options
-------------

In the Class Browser control panel, one or more topics can be selected (shown
with a '+' beside it when selected). Any method which is classified with at
least one selected topic is a candidate for the method display. The dummy
topic '-no-topic' is included so you can show methods without topic
classifications.

You can select and deselect all topics together: on the Class Browser menu,
use Turn All Topics On/Off (key binding F3, T). This selects all topics unless
they are already all selected, in which case they are all deselected.


File: EmacsForSWProducts.info,  Node: Overrides,  Next: The overall method filter,  Prev: Topic options,  Up: Using the Class Browser options

Overrides
---------

Overrides are provided for the pragma flags, topics and 200 method limit.
These are shown in the mode line as follows:

   * override-flags (shown in the mode line as F) when selected, overrides the
     current setting of the pragma flags and shows all methods in the method
     display. Note that unclassified methods are only shown when the pragma
     flags are overridden. The key bindings F3, Shift+F and F3, O toggle the
     state of the pragma flags override.

   * override-topics (shown in the mode line as T) overrides the topic setting
     temporarily, to include methods classified with any topic or with no
     topic as candidates for the method display. The current topic setting is
     not altered so you can disable the topic override to return to it. The
     key binding F3, Shift+T toggles the state of the topics override.

   * override-200-limit (shown in the mode line as 2) overrides the limit on
     the number of methods included in the method display, set at 200 methods.
     Note that removing this limit will give a slow response from the Class
     Browser if a general query is generated. The key binding F3, 2 toggles
     the state of the 200 limit overide.


File: EmacsForSWProducts.info,  Node: The overall method filter,  Prev: Overrides,  Up: Using the Class Browser options

The overall method filter
-------------------------

In summary, the effect of the Class Browser options is that a method is
included as a candidate for the method display if it satisfies all the
following conditions:

   * It must match the method name pattern.

   * It must be 'understood by' a class matching the class name pattern.  If
     local-only is selected, the method must be defined on a class matching
     the class-name pattern. If not-object is selected, the method must be
     defined on such a class or on an ancestor class other than class object.

   * It must have at least one selected topic (unless the topic selection is
     overridden). If no-topic is selected, it may have no topics.

   * It must be classified with a selected level or usage (unless the pragma
     flag setting is overridden)

The first 200 such methods (or all such methods if the 200 method limit is
overridden) are shown in the Class Browser method display; the layout of each
entry is controlled by the layout options.


File: EmacsForSWProducts.info,  Node: Modes for other Smallworld files,  Next: Advanced features and customisation,  Prev: Using the Class Browser,  Up: Top

Modes for other Smallworld files
********************************

Major modes are defined for other types of file which form part of a
Smallworld installation. This means that custom menus and facilities can be
provided for each of these file types.

The modes are:

   * *Note Environment mode:: used for a versions file to select the
     environment to run a Smallworld session

   * *Note Aliases mode:: used for an aliases file which specifies commands
     and parameters for a Launcher program.

   * *Note Product mode:: used for a product definition file; standard name
     product.def.

   * *Note Module mode:: used for a module definition file; standard name
     module.def.

   * *Note Loadlist mode:: used for a load list file which gives a list of
     files to load.

   * *Note Message mode:: used for message files (with extension .msg and
     .hmsg). These files are generally supplied as product or module resource
     files.

These modes all provide standard Emacs facilities as appropriate, including
Font lock mode, Imenu and Speedbar.

Standard Emacs customisation facilities are available for all these modes; use
Customise on the menu for the mode to view and update the available variables.
For more details, see *Note Emacs customisation facilities::.

* Menu:

* Environment mode::
* Aliases mode::
* Product mode::
* Module mode::
* Loadlist mode::
* Message mode::


File: EmacsForSWProducts.info,  Node: Environment mode,  Next: Aliases mode,  Up: Modes for other Smallworld files

Environment mode
================

On the SW menu, use Select Smallworld Environment (key binding F2, S) to
display a buffer showing the available Smallworld environments. The buffer is
in Environment mode and provides facilities to select an environment. The
selected environment is used for all new Smallworld sessions until a different
environment is chosen. See also *Note The Smallworld environment::.

Available environments are defined either by a version file (name and location
defined by the variable gis-version-file) or by a version program (defined by
the variable gis-version-program).

   * If neither a version file nor a version program is available to an Emacs
     session, the variable gis-version-file is initialised to the file
     gis_versions.txt in the user's home directory. This file is created if
     necessary.

   * If both a version file and a version program are available, a version
     file takes precedence.

* Menu:

* Controls on the Environment menu::
* Format of a versions file::


File: EmacsForSWProducts.info,  Node: Controls on the Environment menu,  Next: Format of a versions file,  Up: Environment mode

Controls on the Environment menu
--------------------------------

The list of available versions is shown in a readonly buffer so alphabetic
keys can be used as shortcuts for menu controls. Note that selecting a new
environment is a heavy-weight operation; for example, the Aliases Files
submenu of the SW menu must be updated.

   * Select (key binding Enter) selects the Smallworld Core product indicated
     by the cursor position; this product installation defines the process
     environment for any new Smallworld sessions. The new environment name is
     reported and the buffer is closed.

   * Run Gis Command (key binding R) runs the Gis command to start a new
     Smallworld session in the environment defined by the cursor position.
     Does not change the environment for any other sessions, nor update the
     list of available aliases files.

   * Next Environment (key binding Spacebar) moves the cursor to the next
     product installation in the buffer.

   * Open Aliases File (key binding A) opens the aliases file for the
     environment defined by the cursor position, without having to select the
     environment. If the selected environment has several layered products
     each with their own aliases file then you are asked which one to open.

   * Quit (key binding Q) closes the buffer without making any change to the
     environment.

   * Add New Installation (key binding +) only relevant if a version file is
     in use; prompts for the Smallworld Core product directory, name and
     version of a new environment and makes a corresponding entry in the
     versions file.

   * Reset Process Environment resets the process environment to the initial
     environment on starting the Emacs session.


File: EmacsForSWProducts.info,  Node: Format of a versions file,  Prev: Controls on the Environment menu,  Up: Environment mode

Format of a versions file
-------------------------

The format of a versions file is as follows:

   * Each line starts with two spaces; the first two lines are heading lines.

   * The third and following lines each define a Smallworld environment. There
     are three fields, separated by one or more spaces: the name, version and
     filepath to the product directory of the installation.

For example:

       name        version directory
       ----------- ------- --------------------------------
       Core_4        400    D:\Smallworld\400\product
       Core_4.1      410    D:\Smallworld\410\product
       My_test       410    D:\Smallworld\410test\product

   * The name is used to identify the environment within the Emacs session.
     For example, the environment name is used as part of the buffer name for
     a Gis process.

   * The version identifies the installation for the user; two or more
     installations may have the same version number.

   * The product directory of the installation provides the gis_aliases and
     environment.bat file for the Smallworld Core product, and also for any
     layered products which use the Core product as base.


File: EmacsForSWProducts.info,  Node: Aliases mode,  Next: Product mode,  Prev: Environment mode,  Up: Modes for other Smallworld files

Aliases mode
============

An aliases file, with standard name gis_aliases, may be provided for a layered
product in a Smallworld installation on Windows computers to define the
commands which are available to the Smallworld Launcher program gis.exe. A
Smallworld Core product generally has an aliases file in its config directory;
other layered products may also have their own aliases files. A user may have
a personal aliases file to define additional commands for their own use.

An aliases file consists of one or more stanzas. A stanza has:

   * a name, defining the name of the command definition,

   * one or more entries from a list of fixed parameters for the command, such
     as directory for the name of the working directory for the command and
     program for the name of the executable program to be run

   * any additional parameters for the program

   * environment variables to set before running the command.

For example, a stanza to run a Smallworld session can be defined as:

     swaf_cam_db:
        title     = Smallworld Cambridge Database
        program   = sw_magik_win32
        image     =
                    %SMALLWORLD_GIS%\..\cambridge_db\images\open_swaf.msf
        directory = %SMALLWORLD_GIS%\..\cambridge_db
        args      = -Mextdir %TEMP%
        product   = gis

For more information about the Smallworld Launcher program and the structure
of an aliases file, see Managing Your Installation: The Launcher program on
Windows.

* Menu:

* Aliases submenu on the SW menu::
* Aliases mode and Aliases menu::


File: EmacsForSWProducts.info,  Node: Aliases submenu on the SW menu,  Next: Aliases mode and Aliases menu,  Up: Aliases mode

Aliases submenu on the SW menu
------------------------------

On the SW menu, the Aliases submenu shows the available aliases files. Select
an entry to open a new buffer onto a file, or show an existing buffer for the
file.

The list of available gis_aliases files is shown in three parts:

   * Aliases files common to a group of users, defined by the Emacs variable
     aliases-common-file-list, and aliases files for the current user, defined
     by the Emacs variable aliases-user-file-list. With the standard variable
     values, this is just the gis_aliases file in the user's Home directory.

   * Alias files for the current Smallworld environment; that is, the
     gis_aliases file for the relevant Smallworld Core product (in
     <product>\config) and any gis_aliases files for layered products which
     are based on this Core product. Note that this list of alias files is
     updated when the Smallworld environment is changed (see *Note The
     Smallworld environment::).

   * Any alias files (with name gis_aliases) which are explicitly opened in an
     Emacs buffer. Entries in this part may duplicate entries in the other two
     parts.


File: EmacsForSWProducts.info,  Node: Aliases mode and Aliases menu,  Prev: Aliases submenu on the SW menu,  Up: Aliases mode

Aliases mode and Aliases menu
-----------------------------

An aliases file is opened in Aliases mode; this is a Smallworld major mode.
The Aliases mode supports Font lock mode and standard Emacs facilities such as
Imenu and Speedbar.

The Aliases menu provides custom commands to run the Launcher program with one
of the command definitions in the current aliases file.

   * Run Command Definition (key binding Ctrl+C) uses the cursor in the
     current buffer to identify a stanza; runs the Launcher program with the
     command definition specified by this stanza. If the cursor is not within
     a stanza then prompts for the required command definition.

   * Definitions - a submenu of all the command definitions in the current
     aliases file; select any control on the submenu to run the Launcher
     program with the corresponding command definition.

In either case, the name of the Gis buffer which runs the new process includes
the current Smallworld environment (if this is explicitly selected) and the
name of the command definition.

The standard name of the Launcher program is gis.exe; this program name is
defined by the variable aliases-program. Other Emacs variables define
additional parameters for Aliases mode; use the Emacs customisation facilities
for details (see also *Note Emacs customisation facilities::).


File: EmacsForSWProducts.info,  Node: Product mode,  Next: Module mode,  Prev: Aliases mode,  Up: Modes for other Smallworld files

Product mode
============

An installed Smallworld product uses files with the name product.def to
identify layered products within the installation. Emacs uses Product mode
buffers for these files.

For full details of product definition files, see Application Development
Techniques: Using software modules and products.

* Menu:

* Format of the product definition files::
* Product mode and the Product menu::


File: EmacsForSWProducts.info,  Node: Format of the product definition files,  Next: Product mode and the Product menu,  Up: Product mode

Format of the product definition files
--------------------------------------

The root directory of a layered product is identified by the presence of a
product definition file named product.def. This file has a fixed format to
declare the name and type of the product together with an optional title,
version and description.

For example:

     sw_core layered_product
     version 4.1.0 Build2
     title
        Low-level modules and resources available for all applications
     end

   * The type must be layered_product or customisation_product.

   * The version is of the form:
           version x.y.z aaa

     where x, y and z are the major, minor and sub version numbers and aaa is
     a comment string

   * The title is a single line string; the description may be a multi-line
     string.


File: EmacsForSWProducts.info,  Node: Product mode and the Product menu,  Prev: Format of the product definition files,  Up: Product mode

Product mode and the Product menu
---------------------------------

When a file named product.def is opened in an Emacs buffer, the buffer is set
to Product mode. This mode supports Font lock mode and standard Emacs
facilities such as Imenu and Speedbar. If required, you can use standard Emacs
editing facilities to update the product definition file and save the changes.

The Product menu provides the following facilities:

   * Add Product (key binding F2, B) transmits the buffer to an available
     Smallworld session and loads the corresponding product and its module
     definitions into the session. If there are two or more Gis buffers
     available then you are prompted to select one. Can only be used if the
     product is not already known to the session.

   * Reinitialise Product (key binding F2, R) transmits the buffer to an
     available Smallworld session and forces reloading of the corresponding
     product and its module definitions into the session. If there are two or
     more Gis buffers available then you are prompted to select one. Can be
     used if the product is already known to the session.

Loading a product into a session simply loads the module definitions into the
session and makes the modules available for loading; use the Module Manager or
a Module mode buffer to load a software module with its source code and
resources. See also *Note Module mode::.


File: EmacsForSWProducts.info,  Node: Module mode,  Next: Loadlist mode,  Prev: Product mode,  Up: Modes for other Smallworld files

Module mode
===========

An installed Smallworld product uses files with the name module.def to
identify software modules within the installation and provide information for
the Smallworld Module Manager. Emacs uses Module mode buffers for these files.

For full details of module definition files, see Application Development
Techniques: Using software modules and products.

* Menu:

* Format of the module definition files::
* Module mode and the Module menu::


File: EmacsForSWProducts.info,  Node: Format of the module definition files,  Next: Module mode and the Module menu,  Up: Module mode

Format of the module definition files
-------------------------------------

The top-level directory for a software module is identified by a module
definition file named module.def. This names the module and its version,
provides a brief description, specifies any required modules and provides
other relevant information.

For example:

     admin_application   1  2
     description
        Application providing configuration tools
     end
     requires
        application
        outlook_bar_plugin
        control_panel_plugin
        authorisation_magik_gui
        ...
     end

The first line defines the name and versions of the module. A module may have
a single base version or it may have a base version and also a current version.

   * The current version is incremented for functional enhancements to the
     module which do not affect existing facilities.

   * The base version defines the compatibility for other modules; the base
     version is incremented only for changes which affect existing facilities.

   * One module can require a specific base version of another module and then
     accept any current version with the required base version.

The keywords used in a module definition file include:

   * description provides some text as a description of the module. The
     description is shown in the Module Manager dialog box.

   * hidden declares a software module to be hidden. Hidden modules do not
     appear in the Module Manager dialog box unless the Show Internal Modules
     option is turned on.

   * requires declares other prerequisite software modules upon which this one
     depends. A specific version of a software module can be required.

   * condition_message_accessor declares the message group in which condition
     messages specific to the module are defined. By default all conditions
     use the condition message group.

   * language declares the language of any messages added to the condition
     message group. If this is unset, the language will be taken from the
     Smallworld session.

For full details of module definition files, see Application Development
Techniques: Using software modules and products.


File: EmacsForSWProducts.info,  Node: Module mode and the Module menu,  Prev: Format of the module definition files,  Up: Module mode

Module mode and the Module menu
-------------------------------

When a file named module.def is opened in an Emacs buffer, the buffer is set
to Module mode. This mode supports Font lock mode and standard Emacs
facilities such as Imenu and Speedbar. If required, you can use standard Emacs
editing facilities to update the module definition file and save the changes.

The Module menu provides the following facilities. These all apply to a
Smallworld session; if there are two or more Gis buffers then you are prompted
to select one of them.

   * Load Module (key binding F2, B) transmits the buffer to an available
     Smallworld session and loads all module source files and all compiled
     message files into the session.

   * Reload Module Definition (key binding F2, D) loads the buffer contents
     into a Smallworld session; does not load module source files or resources.

   * Compile Message Files (key binding F2, C) compiles all message files for
     the module ready for loading. See also *Note Message mode::.

   * Remove Module (key binding F2, Shift+R) removes the module definition
     from a Smallworld session.

The Set Options control provides some additional control over loading modules:

   * Set :save_magikc? to _true or _false determines whether compiled Magikc
     files are saved when a Magik source file is loaded. Saving the compiled
     files is an overhead on the initial loading operation but makes
     subsequent load operations quicker.  The key binding F2, S toggles this
     option.

   * Set :force_reload? to _false, :prerequisites or _true determines whether
     the module is reloaded if it is already loaded in the session.
        - If :force_reload? is _false then if the module is already loaded it
          is not reloaded.

        - If :force_reload? is _true then the module is loaded whether or not
          it is already loaded but prerequisite modules, listed by the
          requires keyword, will not be loaded.

        - If :force_reload? is :prerequisites then the module is loaded
          whether or not it is already loaded and all its prerequisite modules
          are loaded as well.

     The key binding F2, R toggles this option between _true and _false; use
     Ctrl+U, F2, R to set it to :prerequisites.

For more information about loading modules in a Smallworld session, see
Application Development Techniques: Using software modules and products.


File: EmacsForSWProducts.info,  Node: Loadlist mode,  Next: Message mode,  Prev: Module mode,  Up: Modes for other Smallworld files

Loadlist mode
=============

A software module in a Smallworld installation uses load list files to define
the directories and files which provide the source code of the module. The
load list files have the standard name load_list.txt and have the format
required by the Magik command load_file_list().

For example, a file load_list.txt in a module source directory with the
following lines:

     progress_bar
     editors/
     database_creation/

results in loading the Magik file named progress_bar from the current
directory and invoking load_file_list() recursively with the load_list.txt
files in the editors and database_creation subdirectories of the source
directory.

A top-level module directory typically contains a load list file with the
single line:

     source/

For full details of loading Magik source code into a Smallworld session, see
Session Management: Loading code into a session.

Emacs uses Loadlist mode buffers for load list files.

The Loadlist menu provides the following controls:

   * Refresh Buffer from Directory (key binding Ctrl+C, R) compares the Magik
     files and subdirectories in the owning directory with the current
     contents of the buffer and prompts for confirmation to make any required
     changes. Once the buffer contents are updated, you can change the order
     of items in the list if required and save the updated list to the
     original file.

   * Transmit Buffer (key binding F2, B) uses the buffer contents as a load
     list for an available Smallworld session. If there are two or more Gis
     buffers available then you are prompted to select one.

   * Toggle: Save Compiled Files (key binding F2, C) when selected, compiled
     Magikc files are saved for any Magik source code files which are loaded.
     Saving the compiled files is an overhead on the initial loading operation
     but makes subsequent load operations quicker.


File: EmacsForSWProducts.info,  Node: Message mode,  Prev: Loadlist mode,  Up: Modes for other Smallworld files

Message mode
============

All text seen by the user of a Smallworld session is provided by messages.
Messages are defined as product and module resources, are compiled for speed
of loading and are loaded into a session only when required.

For more information about messages for a Smallworld installation; see User
Environment: Working with messages.

* Menu:

* Using message files::
* Message mode and the Message menu::


File: EmacsForSWProducts.info,  Node: Using message files,  Next: Message mode and the Message menu,  Up: Message mode

Using message files
-------------------

You create and maintain messages, using Emacs or any other text editor, as
simple text files with a .msg or .hmsg extension. Message files are included
in a module structure in a directory which indicates their language. For
example, message files in the module directory resources\en_gb\messages
provide message text in English as used in the United Kingdom.

In previous releases of Core Spatial Technology help messages were maintained
separately and saved with the file extension .hmsg; help messages need not be
kept in separate files unless it is more convenient to do so.

Message files are compiled to improve the performance of file loading;
compiled message files are saved with the extension .msgc. Compiled messages
for loaded modules are loaded and temporarily cached when needed during the
session; they are not saved in the image file. If there is no corresponding
compiled message file then a message source file is compiled automatically, as
necessary, when the module is loaded. However, if a compiled message file is
available then a more recent message source file is not compiled
automatically; this means that it is necessary to explicitly compile module
messages when message files are updated.

A message file consists of a comment line with a text encoding tag, an
optional comment and a message definition for each message text. Here is an
example of the unit_manager.msg message file. The language for each message is
set explicitly in this example; this is not necessary because the language is
always derived from the location of the message file.

     #% text_encoding = iso8859_1
     :default :en_gb default
     :metric :en_gb Metric
     :imperial :en_gb Imperial

All the messages in a message file belong to the message group given by the
file name.


File: EmacsForSWProducts.info,  Node: Message mode and the Message menu,  Prev: Using message files,  Up: Message mode

Message mode and the Message menu
---------------------------------

When an Emacs buffer is opened onto a message file, the Message mode is used
for the buffer. You can use all the normal Emacs facilities for viewing and
editing the contents of the buffer, including updating the file in the module
directory.

The Message menu provides custom facilities for a message file:

   * Transmit Buffer (key binding F2, B) compiles and saves a message file
     corresponding to the buffer contents and loads it into an available
     Smallworld session. If there are two or more Gis buffers available then
     you are prompted to select one.

   * Compile Message File (key binding F2, C) compiles the message file and
     saves the compiled file; does not load the compiled file. Use this
     control if you want to save a compiled version of a message file for a
     module which you will load later.

   * Previous and Next (key bindings F2, Up Arrow and F2, Down Arrow) move the
     cursor to the previous and next message.

   * Mark Message (key binding F2, M) marks the message containing the current
     cursor position.


File: EmacsForSWProducts.info,  Node: Advanced features and customisation,  Prev: Modes for other Smallworld files,  Up: Top

Advanced features and customisation
***********************************

* Menu:

* Emacs customisation facilities::
* Localisation and multilingual support::
* The auto-gis command::
* Using Smallworld extensions with other Emacs versions::
* Emacs files and directories::
* Using the Launcher program gis.exe with Emacs::
* Emacs as default editor for Magik source files::
* The Method Finder ACP::
* Mouse support::


File: EmacsForSWProducts.info,  Node: Emacs customisation facilities,  Next: Localisation and multilingual support,  Up: Advanced features and customisation

Emacs customisation facilities
==============================

Emacs provides a user interface to view and update the values of many
user-accessible variables which define the behaviour of an Emacs session.

These variables are divided into separate customisation groups. The
customisation buffer for the Smallworld group is accessed from Customise on
the SW menu.

Each Smallworld major mode defines its own customisation group which is a
child of the Smallworld group. For example, you can access a customisation
buffer for the Gis group from Customise on the Gis menu or from the
customisation buffer for the Smallworld group.

To improve startup times, customisation groups for modes with no current
buffers may not be initialised. If necessary, open a buffer with the required
mode before attempting to customise its variables.

* Menu:

* Facilities of an Emacs customisation buffer::
* Using environment variables in Emacs customisation::
* Example Emacs customisations::


File: EmacsForSWProducts.info,  Node: Facilities of an Emacs customisation buffer,  Next: Using environment variables in Emacs customisation,  Up: Emacs customisation facilities

Facilities of an Emacs customisation buffer
-------------------------------------------

An Emacs customisation buffer provides the following facilities:

   * Operations on all values in the current buffer:
        - set all variable values for the current session

        - save the variable values for future sessions

        - reset all edited text so variables show their previous values

        - reset all variables to their saved values

        - remove all customisation

   * For each variable defined in the current group, a short description with
     buttons to show the current value and define a new value.

   * Access to the parent customisation group and to any child customisation
     groups.

Variable values are saved for future sessions by updating the user's .emacs
file, using custom-set-variable and custom-set-faces elements. For example,
setting a new value for magik-font-lock-warning-face results in the following
additions to the .emacs file:

     (custom-set-variables
       ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
       ;; Your init file should contain only one such instance.
       '(magik-font-lock-warning-face (quote magik-font-lock-warning-face)))
     (custom-set-faces
       ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
       ;; Your init file should contain only one such instance.
      '(magik-font-lock-warning-face ((t (:foreground "Red" :inverse-video nil
     :weight bold)))))

If variable values are updated and set for the current session only then no
changes are made to the .emacs file.

Use the customisation buffers, and the standard Emacs facilities, to explore
the available variables for each mode and the values which they can be given.

For example, in the Class Browser customisation group:

   * set the CB2 Font Lock On Face to custom-button-pressed-face

   * set the CB2 Font Lock Off Face to custom-button-face

   * set the variable values for the current session

   * display a Class Browser options panel and note that the settable options
     are shown as raised or depressed buttons


File: EmacsForSWProducts.info,  Node: Using environment variables in Emacs customisation,  Next: Example Emacs customisations,  Prev: Facilities of an Emacs customisation buffer,  Up: Emacs customisation facilities

Using environment variables in Emacs customisation
--------------------------------------------------

When Emacs customisation facilities are used to give a value to a variable or
function, the values of environment variables can be included. Environment
variables are identified by one of the forms:

      %<var>%, $<var> or ${<var>}

For example, the following definition for gis-command-default includes values
of environment variables HOME, TEMP and SMALLWORLD_GIS:

     "[%HOME%] sw_magik_win32 -Mextdir $TEMP
                              -image ${SMALLWORLD_GIS}/images/swaf.msf"


File: EmacsForSWProducts.info,  Node: Example Emacs customisations,  Prev: Using environment variables in Emacs customisation,  Up: Emacs customisation facilities

Example Emacs customisations
----------------------------

Two example .emacs files are provided; these illustrate suitable
configurations for occasional users and for application developers who are
likely to be expert users. The files are supplied as occasional.emacs and
developer.emacs; you can view them from the Customise submenu on the SW menu.

The initial settings of many variables are defined, for all users, by
sw_defaults.el. This file can also be viewed from the Customise submenu on the
SW menu. This file supplies values for all users of an installation; an Emacs
administrator may update this file if changes are required for all users.


File: EmacsForSWProducts.info,  Node: Localisation and multilingual support,  Next: The auto-gis command,  Prev: Emacs customisation facilities,  Up: Advanced features and customisation

Localisation and multilingual support
=====================================

The Smallworld extensions to Emacs have been coded to allow message and error
texts to be localised and displayed in the local language.

* Menu:

* User customisation::
* Emacs messages::
* Help messages::
* Editing and compiling messages::
* Multi-byte character handling::


File: EmacsForSWProducts.info,  Node: User customisation,  Next: Emacs messages,  Up: Localisation and multilingual support

User customisation
------------------

The following variables control the display of messages:

   * resources-languages List of languages to use in order of preference. The
     language names used by Smallworld extensions to Emacs are based on ISO
     639 and are the same as are used by the Message system of Smallworld
     Core. For example, set the variable like this:
          (setq resources-languages '("en_us" "en_gb"))

   * resources-additional-directory-list List of additional directories to
     load messages from. Messages loaded from these directories will override
     any previous definitions.


File: EmacsForSWProducts.info,  Node: Emacs messages,  Next: Help messages,  Prev: User customisation,  Up: Localisation and multilingual support

Emacs messages
--------------

The message name for an Emacs message is prefixed by resources- to generate
the Emacs variable containing the message itself. Messages may contain #1 and
so on which will be replaced by appropriate data. The Emacs messages are
stored in files which roughly match the package they originate from.

Note that the Tools submenu of the SW menu is intended for user customisation.
The controls in this menu are provided directly by the variable
menu-sw-tools-submenu and are not supplied by Emacs messages.


File: EmacsForSWProducts.info,  Node: Help messages,  Next: Editing and compiling messages,  Prev: Emacs messages,  Up: Localisation and multilingual support

Help messages
-------------

A single multi-line message file, named help.hmsg, is used to store messages
that span more than one line. This file stores the messages for all packages
that have a multi-line message.


File: EmacsForSWProducts.info,  Node: Editing and compiling messages,  Next: Multi-byte character handling,  Prev: Help messages,  Up: Localisation and multilingual support

Editing and compiling messages
------------------------------

The Emacs message files use the same format as the message files supplied as
resources of Smallworld modules. The Message mode is used for editing these
files (see *Note Message mode::).

To speed up the starting of Emacs, the message files are compiled into a
resources.msgc.el file in the directory containing all the messages. Emacs
then simply loads this file.

The command to compile Emacs messages is resources-compile-directory.


File: EmacsForSWProducts.info,  Node: Multi-byte character handling,  Prev: Editing and compiling messages,  Up: Localisation and multilingual support

Multi-byte character handling
-----------------------------

GNU Emacs 22.1 and later versions feature multi-byte character handling for
languages using non-Latin character sets. For details, see International
Character Set Support in the Emacs Editor (on the Emacs Help menu, select Read
the Emacs Manual; scroll down to Major Structures of Emacs and click
International).


File: EmacsForSWProducts.info,  Node: The auto-gis command,  Next: Using Smallworld extensions with other Emacs versions,  Prev: Localisation and multilingual support,  Up: Advanced features and customisation

The auto-gis command
====================

The Emacs command auto-gis runs a Smallworld session directly from the Emacs
command line. This command does not use the Launcher program gis.exe and can
be used from a Windows command shell.

The following command line arguments are defined:

   * - gis-command - command string to use to start the Smallworld session

   * - gis-buffer - buffer name to use for the Gis process

   * - magik-file - magik file to be loaded using load_file()

The Emacs command line argument  - f auto-gis must appear last.

Instead of giving command line arguments, the following environment variables
can be set:

   * set the environment variable GIS_COMMAND instead of using  - gis-command.

   * set the environment variable GIS_BUFFER instead of using  - gis-buffer.

   * set the environment variable MAGIK_FILE instead of using  - magik-file.

If both the environment variable and the corresponding command line argument
are given then the command line takes precedent.

In the  - gis-command argument, you may wish to use a hash (#) to represent a
space and | to represent  /. If the initial directory is omitted then the
current directory is added automatically.

* Menu:

* Examples::
* Starting multiple Smallworld sessions::


File: EmacsForSWProducts.info,  Node: Examples,  Next: Starting multiple Smallworld sessions,  Up: The auto-gis command

Examples
--------

Commands are given using a Windows command shell. Note each command should be
given on a single line; some commands are shown here on two or more lines for
clarity.

Using environment variables
          set GIS_COMMAND=sw_magik_win32 -Mextdir c:/temp
                                 -image d:/smallworld/product/images/swaf.msf
          set MAGIK_FILE=d:/users/magik_startup.magik
          emacs -f auto-gis

Using command line options
          emacs -gis-command "sw_magik_win32 -Mextdir c:/temp
                   -image d:/smallworld/product/images/swaf.msf"
                   -magik-file "c:/Magik_startup.magik"
                   -f auto-gis


File: EmacsForSWProducts.info,  Node: Starting multiple Smallworld sessions,  Prev: Examples,  Up: The auto-gis command

Starting multiple Smallworld sessions
-------------------------------------

You can use the auto-gis command to start multiple Smallworld sessions by
giving two or more  - gis-command arguments. The  - gis-buffer and  -
magik-file arguments can also be repeated.

The arguments are grouped thus:

     emacs -gis-command CMD1 -gis-buffer BUF1 -magik-file FILE1
           -gis-command CMD2 -gis-buffer BUF2 -magik-file FILE2

so that CMD1 is run in buffer BUF1 loading FILE1 at startup and CMD2 is run in
buffer BUF2 loading FILE2 at its startup.

Alternatively, the environment variables can be used to specify multiple
sessions by adding an additional string to each environment variable.

For example, the following three environment variables will apply to the same
session:

     GIS_COMMAND_SWAF, GIS_BUFFER_SWAF, MAGIK_FILE_SWAF

The additional string _SWAF, is used only to group related variables.


File: EmacsForSWProducts.info,  Node: Using Smallworld extensions with other Emacs versions,  Next: Emacs files and directories,  Prev: The auto-gis command,  Up: Advanced features and customisation

Using Smallworld extensions with other Emacs versions
=====================================================

* Menu:

* Smallworld extensions with Emacs 20::
* Smallworld extensions with Emacs 19::
* Smallworld extensions with XEmacs::
* Smallworld extensions with CUA mode::


File: EmacsForSWProducts.info,  Node: Smallworld extensions with Emacs 20,  Next: Smallworld extensions with Emacs 19,  Up: Using Smallworld extensions with other Emacs versions

Smallworld extensions with Emacs 20
-----------------------------------

Some Smallworld extensions rely on features of Emacs 21 and do not work with
earlier versions such as Emacs 20. For example, the Tools menu of the SW menu
includes the control Show Trailing Whitespace - this has no effect at Emacs
version 20 or earlier.


File: EmacsForSWProducts.info,  Node: Smallworld extensions with Emacs 19,  Next: Smallworld extensions with XEmacs,  Prev: Smallworld extensions with Emacs 20,  Up: Using Smallworld extensions with other Emacs versions

Smallworld extensions with Emacs 19
-----------------------------------

At Smallworld Core 4.1 and later releases, byte-compiled Emacs files with
extension .elc are generated using Emacs version 20.3. As a result, these
compiled files cannot be used with earlier Emacs versions, such as Emacs
version19.

The Smallworld extensions can be used with Emacs version 19 if all the files
are recompiled, but some features are not supported in Emacs versions before
version 21.

For an installation where Emacs 19 and Emacs 20 or later are both in use, you
are recommended to store the Emacs 19 versions of the .elc files in a separate
directory and modify site-start-19.el appropriately.


File: EmacsForSWProducts.info,  Node: Smallworld extensions with XEmacs,  Next: Smallworld extensions with CUA mode,  Prev: Smallworld extensions with Emacs 19,  Up: Using Smallworld extensions with other Emacs versions

Smallworld extensions with XEmacs
---------------------------------

The Smallworld extensions have been verified to work with XEmacs, but are not
extensively tested or formally supported in this environment.

For more information about XEmacs, see `http://www.xemacs.org'.


File: EmacsForSWProducts.info,  Node: Smallworld extensions with CUA mode,  Prev: Smallworld extensions with XEmacs,  Up: Using Smallworld extensions with other Emacs versions

Smallworld extensions with CUA mode
-----------------------------------

CUA mode is an Emacs extension that provides an implementation of keyboard
shortcuts which are common on Windows operating systems, such as Ctrl+Z for
undo, Ctrl+C for copy, Ctrl+X for cut and Ctrl+V for paste.

Smallworld extensions are not tested with CUA mode. In addition, Smallworld
extensions may not work well in an installation which includes CUA mode, even
if CUA mode is disabled.

For more information about CUA mode, see `http://www.cua.dk'.


File: EmacsForSWProducts.info,  Node: Emacs files and directories,  Next: Using the Launcher program gis.exe with Emacs,  Prev: Using Smallworld extensions with other Emacs versions,  Up: Advanced features and customisation

Emacs files and directories
===========================

When Emacs is installed for a Smallworld product, as part of a Smallworld
installation, the Emacs site-lisp directory is located as follows:

   * On Windows: <SW_installation_dir>\emacs\site-lisp

   * On UNIX: <SW_installation_dir>/emacs/share/site-lisp

The Smallworld extensions and other features are installed in the site-lisp
directory, which includes the following subdirectories:

   * features contains all the third-party features delivered with Smallworld
     Core, in version-specific subdirectories.

   * smallworld contains Smallworld-specific extensions.

   * local available for local site-specific extensions and features; this is
     provided to make it easy for Emacs administrators to upgrade to later
     versions.

   * data contains various data files.

   * deprecated contains features that are superceded or not used and will be
     removed at a future release.

* Menu:

* Files in the site-lisp directory::
* nXML mode for editing XML files::
* Rational ClearCase interface::
* Emacs shell on Windows platforms::


File: EmacsForSWProducts.info,  Node: Files in the site-lisp directory,  Next: nXML mode for editing XML files,  Up: Emacs files and directories

Files in the site-lisp directory
--------------------------------

The following files are included in the site-lisp directory.

   * default.el loaded by Emacs at startup unless -no-init-file argument is
     provided or inhibit-default-init is set to t in the .emacs file. This
     file contains code to configure Emacs to use the Smallworld extensions
     and additional facilities.

   * site-start.el loaded by Emacs at startup unless -no-site-file argument is
     provided.

   * subdirs.el loaded by Emacs at startup and contains code to modify the
     load path.

These files do not need to be byte-compiled, and we recommend that you do not
compile them. However, if you do byte-compile these files then, when you
change a source file, it is essential that you byte-compile the file again.


File: EmacsForSWProducts.info,  Node: nXML mode for editing XML files,  Next: Rational ClearCase interface,  Prev: Files in the site-lisp directory,  Up: Emacs files and directories

nXML mode for editing XML files
-------------------------------

The nXML mode is used for editing files in XML and similar formats. This mode
is provided separately from standard Emacs facilities; distribution is covered
by the GNU General Public Licence.

For more information, see the info topic nXML Mode in the Emacs manual.


File: EmacsForSWProducts.info,  Node: Rational ClearCase interface,  Next: Emacs shell on Windows platforms,  Prev: nXML mode for editing XML files,  Up: Emacs files and directories

Rational ClearCase interface
----------------------------

IBM Rational® ClearCase® provides life cycle management and control of
software development assets. Files in subdirectory clearcase implement
ClearCase mode and provide integration between Emacs and ClearCase. These
files are provided separately from standard Emacs facilities; distribution is
covered by the GNU General Public Licence.

For more information, see:

   * `http://www-306.ibm.com/software/awdtools/clearcase'


File: EmacsForSWProducts.info,  Node: Emacs shell on Windows platforms,  Prev: Rational ClearCase interface,  Up: Emacs files and directories

Emacs shell on Windows platforms
--------------------------------

By default, on Windows platforms, Emacs 21 does not use the Windows cmd.exe
shell because it requires different configuration to other shells in Emacs;
instead Emacs provides cmdproxy.exe.

If necessary you can use cmd.exe instead of cmdproxy.exe, however it is not
recommended since Emacs will have problems starting subprocesses correctly.
You will also see warnings about the use of cmd.exe in a *Shell Configuration*
buffer even if the other variables are set up for its use. To prevent this
initial warning from Emacs about the use of cmd.exe you will need to either
add an appropriate line to your .emacs file, or uncomment it from
sw_defaults.el. The line is:

     (remove-hook 'after-init-hook 'w32-check-shell-configuration)


File: EmacsForSWProducts.info,  Node: Using the Launcher program gis.exe with Emacs,  Next: Emacs as default editor for Magik source files,  Prev: Emacs files and directories,  Up: Advanced features and customisation

Using the Launcher program gis.exe with Emacs
=============================================

A Smallworld session on a Windows platform is run using a combination of the
executable sw_magik_win32 and a Magik image file.

The executable sw_magik_win32 is not intended to be run directly; the Launcher
program gis.exe is used instead. The advantages of this scheme include:

   * gis.exe sets a large number of Smallworld-specific environment variables
     that are needed by sw_magik_win32.

   * gis.exe provides a level of indirection by using command aliases looked
     up in the alias files for the current environment. As a result, the
     command name can be consistent and independent of any explicit reference
     to the location of the image file or extension area.

   * The options of running Magik with an interactive console or with output
     sent to a log file are conveniently controlled by gis.exe.

The gis.exe Launcher program can launch console-mode and windows-mode
programs, from a Start menu icon, from the cmd.exe command line, and from
Emacs. However, using it to launch a console-mode program from Emacs always
causes the launched program to run in a new console window, with its stdio not
redirected to or from the Emacs buffer.

As an alternative, you can use Gis Shell Process on the Gis menu (key binding
F4, $) to start a command shell with the same environment as the Gis process.

See also Managing Your Installation: The Launcher program on Windows.


File: EmacsForSWProducts.info,  Node: Emacs as default editor for Magik source files,  Next: The Method Finder ACP,  Prev: Using the Launcher program gis.exe with Emacs,  Up: Advanced features and customisation

Emacs as default editor for Magik source files
==============================================

On Windows platforms, Emacs installed as part of a Smallworld product
installation can be defined as the default text editor for Magik source files
(that is, files with extension .magik).

This option is available when installing Emacs as part of a Smallworld product
installation. You are informed of the current default text editor for .magik
files, if any, and asked if you want to use the current Emacs installation as
the default editor for .magik files.


File: EmacsForSWProducts.info,  Node: The Method Finder ACP,  Next: Mouse support,  Prev: Emacs as default editor for Magik source files,  Up: Advanced features and customisation

The Method Finder ACP
=====================

This section gives details of the Method Finder ACP which maintains
information about the source for the methods in a Smallworld session or method
finder file. Notice that the Method Finder ACP provided at Smallworld Core
version 4 and later versions is not compatible with method finder files
produced at earlier versions.

The Method Finder is used both by a Smallworld session, which informs it about
code that is loaded and when to save its data to file, and also by a Class
Browser for the session to provide the method display. For a session started
with a particular image file, the Method Finder uses information from a method
finder file with the same name and extension .mf. For example, with an image
file test.msf the method finder file is test.mf.

You can start a Class Browser directly for a method finder file; in this case
an independent Method Finder, not linked to a Smallworld session, is started.

The Method Finder for a Smallworld session is started when necessary. For
example, if you start a Class Browser for the session or if you are running a
session and load code or remove methods or exemplars. When you save an image
file, a Method Finder is started if necessary and automatically saves a method
finder file with the image file. You must keep these two files together at all
times.

The Method Finder outputs information to the Magik terminal, for example:

     MagikSF> load_file("~/dunderline.magik")
     loading ~/dunderline.magik
     --- line 0
     Defining method double_underline() in text
     a sw:method_finder loading /home/lanthanum/data/open.mf
     method_finder: loaded
     --- line 24
     True
     MagikSF> save_image_startup("test.msf")
     method_finder: done
     "test.msf"

* Menu:

* Activation of the Method Finder::
* Use of environment variables in method finder files::


File: EmacsForSWProducts.info,  Node: Activation of the Method Finder,  Next: Use of environment variables in method finder files,  Up: The Method Finder ACP

Activation of the Method Finder
-------------------------------

Because the Method Finder is only activated when code is loaded or when a
Class Browser is activated (or when explicitly requested using Magik
protocols), it is not normally active for production use. This is important as
the Method Finder uses additional system resources. The method finder files
also need disk space; they are generally about one fifth the size of the
corresponding image files.

You can prevent the Method Finder from starting as follows:

     method_finder.auto_start? << _false

It will also not start unless there is a method finder file with the same
name, and in the same directory, as the image file.


File: EmacsForSWProducts.info,  Node: Use of environment variables in method finder files,  Prev: Activation of the Method Finder,  Up: The Method Finder ACP

Use of environment variables in method finder files
---------------------------------------------------

Mappings are defined on the Method Finder so that environment variables are
used in a method finder file in place of pathnames. This allows the method
finder files to be more flexible.

The following programming interface is defined:

   * method_finder.add_mapping( mapping _optional value, prefix ) Adds
     environment variable mapping to the set of directory mappings. If value
     is not given, then the current value of the environment variable mapping
     is used. value may itself include environment variables.

     prefix is a "$" by default, because it is expected that environment
     variables are used for mappings, and this is appropriate for both Windows
     and UNIX environments.

     For example:

          method_finder.add_mapping("SW_KERNEL_DIR",
                          "$SMALLWORLD_GIS/sw_core/modules/sw_kernel")

     By default, mappings are defined for environment variables SMALLWORLD_GIS
     and SMALLWORLD_GIS/.. .

   * method_finder.apply_mappings( _optional verbose? ) Apply the directory
     mappings to the current method finder directory set. If verbose? is true
     then report on all changed directories.

   * method_finder.use_mappings?  When true, all source file paths are output
     using the available list of mapped environment variables.

   * print(method_finder) Includes the current list of environment variable
     mappings in the output.

     For example:

          MagikSF> print(method_finder)
             a sw:method_finder
             command method_finder
             pid     5868
             mapping /smallworld/product => $SMALLWORLD_GIS
             mapping /smallworld => $SMALLWORLD_GIS/..
             mapping $SMALLWORLD_GIS/sw_core/modules/sw_kernel =>
                                                 $SW_KERNEL_DIR


File: EmacsForSWProducts.info,  Node: Mouse support,  Prev: The Method Finder ACP,  Up: Advanced features and customisation

Mouse support
=============

The Smallworld customisation of Emacs provides the following actions for mouse
buttons in combination with the Shift and Control keys. Note that using the
left and right buttons together is equivalent to using the middle button. This
means that a two button mouse can be used with a Smallworld installation.

* Menu:

* Mouse button actions in the text area of a buffer::
* Mouse button actions in the mode line of a buffer::


File: EmacsForSWProducts.info,  Node: Mouse button actions in the text area of a buffer,  Next: Mouse button actions in the mode line of a buffer,  Up: Mouse support

Mouse button actions in the text area of a buffer
-------------------------------------------------

             Left button             Middle button or        Right button
                                     Left+Right              
Click        Set point               Paste cut or copied     Single-click: Copy
                                     text                    Double-click: Cut
Hold down                            Show Imenu for the      
Shift and                            buffer                  
click                                                        
Hold down    Show menu of buffers    Show menu of font       Show menu for the
Ctrl and                             properties              major mode of the
click                                                        buffer
Hold down    Paste cut or copied                             
Ctrl+Shift   text                                            
and click                                                    
Drag         Set the mark and        Scroll the buffer       
             define a region         vertically              


File: EmacsForSWProducts.info,  Node: Mouse button actions in the mode line of a buffer,  Prev: Mouse button actions in the text area of a buffer,  Up: Mouse support

Mouse button actions in the mode line of a buffer
-------------------------------------------------

When the mouse position is in the mode line of a buffer, button clicks have
special effects depending on the position in the mode line; short help text is
shown in the echo line.

For a Class Browser mode buffer, mouse clicks in the mode line are used to
control the method display (see *Note Using the mode line for a Class Browser
buffer::).

Dragging with the left or middle mouse button in the mode line resizes windows
horizontally, or adds a new window at the bottom of a frame. When there are
side-by-side windows, dragging the boundary between their mode lines resizes
the windows horizontally.


Tag Table:
Node: Top317
Node: Introduction to the GNU Emacs editor2236
Node: Getting started2958
Node: Smallworld extensions to Emacs4568
Node: Invoking commands6227
Node: Accessing help information8815
Node: Files and directories for Emacs11195
Node: Some Emacs concepts13266
Node: Some standard Emacs key bindings18357
Node: Smallworld major modes for Emacs buffers22012
Node: Emacs minor modes24406
Node: Setting a minor mode26274
Node: Font lock mode for Smallworld buffers27349
Node: Defining abbreviations for Abbrev mode28603
Node: Highlight changes mode for Smallworld buffers29434
Node: Keys for Smallworld Emacs commands32194
Node: Help on Smallworld extensions to Emacs33034
Node: General commands33540
Node: Interacting with a Smallworld session36151
Node: Key bindings for Magik mode39306
Node: Interacting with a Class Browser process42865
Node: Key bindings for other modes46180
Node: The SW menu50296
Node: Name completion using F2 Tab52309
Node: The Smallworld environment53542
Node: Alias Files menu56399
Node: Run or goto a Smallworld session57814
Node: Run or goto a Class Browser session64050
Node: The Tools submenu69849
Node: The Help submenu74459
Node: Gis mode and running a Smallworld session75455
Node: Sending commands to the Smallworld session76949
Node: The Class Browser for a Smallworld session79358
Node: Inspecting a Magik object80389
Node: File loading with the drag and drop tool81430
Node: Jump to error on loading a Magik source file82155
Node: Facilities for tracebacks83144
Node: Interface to the Magik Debugger of the Development Tools application84498
Node: The Gis process filter85446
Node: A command shell for the Gis process86201
Node: The Gis command history of a Gis buffer87273
Node: Magik mode and editing Magik source code89395
Node: Viewing Magik code90786
Node: Emacs Code Browser for a Magik buffer91390
Node: Method name display91949
Node: Imenu and Speedbar for a Magik buffer92838
Node: Transmitting Magik to a Smallworld session93407
Node: Inspecting a Magik object and debugging a method95809
Node: Auto-Complete mode for Magik code98014
Node: Electric Magik and name completion facilities99034
Node: Keywords with an Electric Magik template101020
Node: Classification with the pragma tool102287
Node: Creating _pragma statements103839
Node: Facilities for application developers105219
Node: Copying and comparing Magik methods106354
Node: Facilities for tracing and debugging108713
Node: Facilities for comments110882
Node: Using the Class Browser112585
Node: Introduction to method classification for the Class Browser114470
Node: Summary of classification for protocols and classes115999
Node: Getting started with the Class Browser120643
Node: Starting the Class Browser122249
Node: Displaying methods and choosing a layout123918
Node: Displaying globals procedures and conditions126922
Node: Real-time display128327
Node: Displaying a selected method or class129199
Node: Showing the class hierarchy131134
Node: Jumping to the source of a method133819
Node: Showing the buffer for the Smallworld session136448
Node: Hiding and closing a Class Browser137367
Node: Using the mode line for a Class Browser buffer138404
Node: Using the Class Browser options141292
Node: Pragma flags142707
Node: Inheritance options143719
Node: Layout options144986
Node: Topic options145619
Node: Overrides146322
Node: The overall method filter147688
Node: Modes for other Smallworld files148834
Node: Environment mode150396
Node: Controls on the Environment menu151538
Node: Format of a versions file153416
Node: Aliases mode154732
Node: Aliases submenu on the SW menu156430
Node: Aliases mode and Aliases menu157726
Node: Product mode159201
Node: Format of the product definition files159750
Node: Product mode and the Product menu160700
Node: Module mode162251
Node: Format of the module definition files162851
Node: Module mode and the Module menu165176
Node: Loadlist mode167753
Node: Message mode169799
Node: Using message files170340
Node: Message mode and the Message menu172291
Node: Advanced features and customisation173545
Node: Emacs customisation facilities174093
Node: Facilities of an Emacs customisation buffer175233
Node: Using environment variables in Emacs customisation177541
Node: Example Emacs customisations178350
Node: Localisation and multilingual support179170
Node: User customisation179713
Node: Emacs messages180459
Node: Help messages181142
Node: Editing and compiling messages181519
Node: Multi-byte character handling182195
Node: The auto-gis command182724
Node: Examples184201
Node: Starting multiple Smallworld sessions184999
Node: Using Smallworld extensions with other Emacs versions186031
Node: Smallworld extensions with Emacs 20186510
Node: Smallworld extensions with Emacs 19187019
Node: Smallworld extensions with XEmacs187926
Node: Smallworld extensions with CUA mode188424
Node: Emacs files and directories189131
Node: Files in the site-lisp directory190464
Node: nXML mode for editing XML files191416
Node: Rational ClearCase interface191932
Node: Emacs shell on Windows platforms192601
Node: Using the Launcher program gis.exe with Emacs193549
Node: Emacs as default editor for Magik source files195258
Node: The Method Finder ACP196028
Node: Activation of the Method Finder198090
Node: Use of environment variables in method finder files198945
Node: Mouse support201016
Node: Mouse button actions in the text area of a buffer201599
Node: Mouse button actions in the mode line of a buffer202887

End Tag Table
